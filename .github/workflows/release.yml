name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: askfrank_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Database configuration for tests
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: askfrank_test
      DB_SSL_MODE: disable
      # OpenTelemetry configuration (disabled for CI)
      OTEL_ENABLED: false
      # Test environment
      ENVIRONMENT: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Dependencies
        run: make deps

      - name: Generate Code
        run: make generate

      - name: Lint Code
        run: make lint

      - name: Run All Tests
        run: make test

      - name: Generate Coverage Report
        run: make test-coverage

  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Dependencies
        run: make deps

      - name: Generate Code
        run: make generate

      - name: Build Production Binary
        run: make build-prod

      - name: Package Binary
        run: |
          mkdir -p dist
          cp bin/askfrank dist/
          tar -czvf askfrank_${{ github.ref_name }}_linux_amd64.tar.gz -C dist askfrank

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          make docker-build
          docker tag ghcr.io/${{ github.repository_owner }}/askfrank:latest ghcr.io/${{ github.repository_owner }}/askfrank:${{ github.ref_name }}
          docker push ghcr.io/${{ github.repository_owner }}/askfrank:${{ github.ref_name }}
          docker push ghcr.io/${{ github.repository_owner }}/askfrank:latest

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: askfrank_${{ github.ref_name }}_linux_amd64.tar.gz
          body: |
            ## Release ${{ github.ref_name }}
            
            ### Changes
            See the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}) for detailed changes.
            
            ### Downloads
            - **Binary**: `askfrank_${{ github.ref_name }}_linux_amd64.tar.gz`
            - **Docker**: `ghcr.io/${{ github.repository_owner }}/askfrank:${{ github.ref_name }}`
            
            ### Verification
            All tests have passed including:
            - ✅ Unit Tests
            - ✅ Integration Tests  
            - ✅ Code Linting
            - ✅ Security Checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}