// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/freekieb7/askfrank/internal/web/ui/views/component"
	"strings"
	"time"
)

type Client struct {
	ID           string
	Name         string
	Description  string
	RedirectURIs []string
	IsPublic     bool
	Secret       string
	Scopes       []string
	ModifiedAt   time.Time
}

type Scope struct {
	Name        string
	Description string
}

type ClientsPageProps struct {
	component.AppLayoutProps
	Clients []Client
	Scopes  []Scope
}

func ClientsPage(props ClientsPageProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"p-2\"><h1 class=\"page-title\">Developer Portal</h1><p class=\"page-subtitle\">Manage your OAuth Clients and API access</p><div id=\"table-clients\" class=\"border border-gray-200 rounded-md bg-white\"><!-- Table Header --><div class=\"flex justify-between items-center p-2\"><button type=\"button\" class=\"rounded-full bg-primary-500 hover:bg-primary-600 text-white w-10 h-10 flex items-center justify-center transition-colors\" id=\"button-create-client\"><i class=\"fas fa-plus w-4 h-4\"></i></button></div><!-- Clients Table -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if len(props.Clients) == 0 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"p-4 text-center text-gray-500\">No OAuth clients found. Click the + button to create your first client.</div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = component.Table(component.TableProps{
					Columns: []component.TableColumn{
						{Header: "Name", Field: "name"},
						{Header: "Description", Field: "description"},
						{Header: "Client ID", Field: "id"},
						{Header: "Client Secret", Field: "secret"},
						{Header: "Scopes", Field: "scopes"},
						{Header: "Type", Field: "type"},
						{Header: "Redirect URIs", Field: "redirect_uris"},
						{Header: "Modified at", Field: "modified_at"},
					},
					Data: func() []component.TableRow {
						rows := make([]component.TableRow, len(props.Clients))
						for idx, client := range props.Clients {
							clientType := "Confidential"
							if client.IsPublic {
								clientType = "Public"
							}
							rows[idx] = component.TableRow{
								ID: client.ID,
								Cells: []component.TableCell{
									{Value: client.Name, Tooltip: ""},
									{Value: client.Description, Tooltip: ""},
									{Value: client.ID, Tooltip: ""},
									{Value: client.Secret, Tooltip: ""},
									{Value: strings.Join(client.Scopes, ", "), Tooltip: ""},
									{Value: clientType, Tooltip: ""},
									{Value: strings.Join(client.RedirectURIs, ", "), Tooltip: ""},
									{Value: client.ModifiedAt.Format("2006-01-02 15:04:05"), Tooltip: ""},
								},
								DeleteButtonID: "button-delete-client",
							}
						}
						return rows
					}(),
					ShowActions: true,
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div></div><!-- Create Client Modal Overlay --> <div id=\"modal-create-client\" class=\"hidden fixed inset-0 bg-gray-500/50 overflow-y-auto h-full w-full z-50\"><div class=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\"><h2 class=\"mb-2 font-semibold\">Create New OAuth Client</h2><form id=\"create-client-form\"><div class=\"mb-2\"><label for=\"client-name\" class=\"block\">Client Name:</label><div class=\"mt\"><input type=\"text\" id=\"client-name\" name=\"client-name\" class=\"block w-full rounded-md border border-gray-200\" required></div></div><div class=\"mb-2\"><label for=\"client-description\" class=\"block\">Description:</label><div class=\"mt\"><input type=\"text\" id=\"client-description\" name=\"client-description\" class=\"block w-full rounded-md border border-gray-200\"></div></div><div class=\"mb-2\"><label for=\"redirect-uris\" class=\"block\">Redirect URIs (comma separated):</label><div class=\"mt\"><input type=\"text\" id=\"redirect-uris\" name=\"redirect-uris\" class=\"block w-full rounded-md border border-gray-200\"></div></div><div class=\"mb-2\"><label class=\"flex items-center\" for=\"is-public\"><input type=\"checkbox\" id=\"is-public\" name=\"is-public\"> <span class=\"ml-2\">Is Public Client</span></label></div><!-- Scopes Selection --><details class=\"group mt-2\"><summary class=\"p-2 flex items-center rounded-md bg-gray-100 hover:bg-gray-200 cursor-pointer\"><span>Scopes</span> <i class=\"fas fa-chevron-down ml-2 group-open:rotate-180\"></i></summary><div class=\"mt-1 space-y-1\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, scope := range props.Scopes {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"p-2\" key=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(scope.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/clients.templ`, Line: 126, Col: 41}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"><label class=\"flex\" for=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs("scope-" + scope.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/clients.templ`, Line: 127, Col: 56}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"><input type=\"checkbox\" id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs("scope-" + scope.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/clients.templ`, Line: 128, Col: 59}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" name=\"scopes\" value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(scope.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/clients.templ`, Line: 128, Col: 94}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\"><div class=\"ml-2 select-none\"><p class=\"font-semibold\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(scope.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/clients.templ`, Line: 130, Col: 48}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</p><p class=\"text-gray-500 text-sm\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(scope.Description)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/clients.templ`, Line: 131, Col: 63}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</p></div></label></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</div></details><div class=\"mt-4 flex justify-end space-x-2\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = component.SecondaryButton(component.ButtonProps{
				Type:  "button",
				ID:    "button-cancel-create-client-modal",
				Label: "Cancel",
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = component.PrimaryButton(component.ButtonProps{
				Type:  "submit",
				ID:    "button-submit-create-client-modal",
				Label: "Create",
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</div></form></div></div><!-- Delete Client Confirmation Modal --> <div id=\"modal-delete-client\" class=\"hidden fixed inset-0 bg-gray-500/50 overflow-y-auto h-full w-full z-50\"><div class=\"relative top-40 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\"><h2 class=\"font-semibold\">Confirm Delete OAuth Client</h2><p class=\"mt-2\">Are you sure you want to delete the OAuth client \"<span id=\"delete-client-name\" class=\"font-semibold\"></span>\"?</p><form id=\"delete-client-form\"><div class=\"mt-4 flex justify-end space-x-2\"><button type=\"button\" id=\"button-cancel-delete-client-modal\" class=\"p-2 rounded-md hover:bg-gray-100\">Cancel</button> <button type=\"submit\" id=\"button-confirm-delete-client-modal\" class=\"p-2 rounded-md text-white bg-red-500 hover:bg-red-600\">Delete</button></div></form></div></div><script>\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\tconst btnCreateClient = document.getElementById('button-create-client');\n\t\t\t\tconst modalCreateClient = document.getElementById('modal-create-client');\n\t\t\t\tconst btnCancelCreateClientModal = document.getElementById('button-cancel-create-client-modal');\n\t\t\t\tconst createClientForm = document.getElementById('create-client-form');\n\n\t\t\t\t// Function to close modal\n\t\t\t\tfunction closeCreateClientModal() {\n\t\t\t\t\tmodalCreateClient.classList.add('hidden');\n\t\t\t\t}\n\n\t\t\t\t// Event listeners\n\t\t\t\tbtnCreateClient.addEventListener('click', function() {\n\t\t\t\t\tmodalCreateClient.classList.remove('hidden');\n\t\t\t\t});\n\n\t\t\t\tbtnCancelCreateClientModal.addEventListener('click', closeCreateClientModal);\n\n\t\t\t\t// Close modal when clicking outside of it\n\t\t\t\tmodalCreateClient.addEventListener('click', function(event) {\n\t\t\t\t\tif (event.target === modalCreateClient) {\n\t\t\t\t\t\tcloseCreateClientModal();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Close modal with Escape key\n\t\t\t\tdocument.addEventListener('keydown', function(event) {\n\t\t\t\t\tif (event.key === 'Escape' && !modalCreateClient.classList.contains('hidden')) {\n\t\t\t\t\t\tcloseCreateClientModal();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tcreateClientForm.addEventListener('submit', async function(event) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t// Gather form data\n\t\t\t\t\tconst name = document.getElementById('client-name').value;\n\t\t\t\t\tconst description = document.getElementById('client-description').value;\n\t\t\t\t\tconst redirectURIs = document.getElementById('redirect-uris').value.split(',').map(uri => uri.trim());\n\t\t\t\t\tconst isPublic = document.getElementById('is-public').checked;\n\t\t\t\t\tconst scopes = Array.from(document.querySelectorAll('input[name=\"scopes\"]:checked')).map(cb => cb.value);\n\n\t\t\t\t\t// Send data to server to create new client\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch('/admin/clients/create-client', {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t'X-CSRF-Token': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\tname: name,\n\t\t\t\t\t\t\t\tdescription: description,\n\t\t\t\t\t\t\t\tredirect_uris: redirectURIs,\n\t\t\t\t\t\t\t\tis_public: isPublic,\n\t\t\t\t\t\t\t\tscopes: scopes\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\tconst errorData = await response.json();\n\t\t\t\t\t\t\tthrow new Error(errorData.message || 'Failed to create OAuth client');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// On success, close modal and refresh page or update client list dynamically\n\t\t\t\t\t\tmodalCreateClient.classList.add('hidden');\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error:', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// const btnDeleteClient = document.getElementById('button-delete-client');\n\t\t\t\tconst modalDeleteClient = document.getElementById('modal-delete-client');\n\t\t\t\tconst btnCancelDeleteClientModal = document.getElementById('button-cancel-delete-client-modal');\n\t\t\t\tconst btnConfirmDeleteClientModal = document.getElementById('button-confirm-delete-client-modal');\n\t\t\t\tconst deleteClientNameSpan = document.getElementById('delete-client-name');\n\t\t\t\tconst deleteClientForm = document.getElementById('delete-client-form');\n\n\t\t\t\t// Function to close modal\n\t\t\t\tfunction closeDeleteClientModal() {\n\t\t\t\t\tmodalDeleteClient.classList.add('hidden');\n\t\t\t\t}\n\n\t\t\t\t// Event listeners\n\t\t\t\tdocument.querySelectorAll('#button-delete-client').forEach(function(btnDeleteClient) {\n\t\t\t\t\tbtnDeleteClient.addEventListener('click', function() {\n\t\t\t\t\t\tconst clientId = btnDeleteClient.closest('tr').key;\n\t\t\t\t\t\tconst clientName = btnDeleteClient.closest('tr').querySelector('td').innerText;\n\t\t\t\t\t\tdeleteClientNameSpan.innerText = clientName;\n\n\t\t\t\t\t\t// Store client ID on confirm button for later use\n\t\t\t\t\t\tbtnConfirmDeleteClientModal.setAttribute('data-id', clientId);\n\n\t\t\t\t\t\tmodalDeleteClient.classList.remove('hidden');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tbtnCancelDeleteClientModal.addEventListener('click', closeDeleteClientModal);\n\n\t\t\t\t// Close modal when clicking outside of it\n\t\t\t\tmodalDeleteClient.addEventListener('click', function(event) {\n\t\t\t\t\tif (event.target === modalDeleteClient) {\n\t\t\t\t\t\tcloseDeleteClientModal();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Close modal with Escape key\n\t\t\t\tdocument.addEventListener('keydown', function(event) {\n\t\t\t\t\tif (event.key === 'Escape' && !modalDeleteClient.classList.contains('hidden')) {\n\t\t\t\t\t\tcloseDeleteClientModal();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tdeleteClientForm.addEventListener('submit', async function(event) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tconst clientId = btnConfirmDeleteClientModal.getAttribute('data-id');\n\t\t\t\t\t// Send request to server to delete client\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch('/admin/clients/delete-client', {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t'X-CSRF-Token': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\tclient_id: clientId\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\tconst errorData = await response.json();\n\t\t\t\t\t\t\tthrow new Error(errorData.message || 'Failed to delete OAuth client');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// On success, close modal and refresh page or update client list dynamically\n\t\t\t\t\t\tcloseDeleteClientModal();\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error:', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = component.AppLayout(props.AppLayoutProps).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
