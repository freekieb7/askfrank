// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/freekieb7/askfrank/internal/web/ui/views/component"

type LoginPageProps struct {
	component.LayoutProps
	ReturnTo string
}

func LoginPage(props LoginPageProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"max-w-md mx-auto mt-10 p-6 border rounded-lg shadow-lg\"><h1 class=\"mb-4\">Sign In</h1><form id=\"login-form\"><div id=\"error-message\" class=\"error-message hidden\"><p id=\"error-text\"></p></div><div id=\"success-message\" class=\"success-message hidden\"><p id=\"success-text\"></p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if props.ReturnTo != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<input type=\"hidden\" name=\"return_to\" value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(props.ReturnTo)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/ui/views/login.templ`, Line: 22, Col: 65}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"mb-2\"><label for=\"email\" class=\"block\">Email:</label><div class=\"mt\"><input type=\"text\" id=\"email\" name=\"email\" class=\"block w-full rounded-md border border-gray-200\" required></div></div><div class=\"mb-2\"><label for=\"password\" class=\"block\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" class=\"block w-full rounded-md border border-gray-200\" required></div><div class=\"mb-2\"><label for=\"remember_me\" class=\"flex items-center\"><input type=\"checkbox\" id=\"remember_me\" name=\"remember_me\"> <span class=\"ml-2\">Remember Me</span></label></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = component.PrimaryButton(component.ButtonProps{
				Type:  "submit",
				ID:    "submit-button",
				Label: "Login",
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</form><p>Don't have an account? <a href=\"/register\">Register</a></p></div><script>\n\t\t\tclass LoginError extends Error {\n\t\t\t\tconstructor(consoleMessage, userMessage) {\n\t\t\t\t\tsuper(consoleMessage);\n\t\t\t\t\tthis.name = 'LoginError';\n\t\t\t\t\tthis.userMessage = userMessage;\n\t\t\t\t\tthis.consoleMessage = consoleMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n            document.addEventListener('DOMContentLoaded', function() {\n                const loginForm = document.getElementById('login-form');\n                const errorDiv = document.getElementById('error-message');\n\t\t\t\tconst successDiv = document.getElementById('success-message');\n\t\t\t\tconst errorText = document.getElementById('error-text');\n\t\t\t\tconst successText = document.getElementById('success-text');\n                const submitButton = document.getElementById('submit-button');\n\n                loginForm.addEventListener('submit', async function(event) {\n                    event.preventDefault();\n\n                    // Hide previous messages\n\t\t\t\t\terrorDiv.classList.add('hidden');\n\t\t\t\t\tsuccessDiv.classList.add('hidden');\n\t\t\t\t\t\n\t\t\t\t\t// Disable submit button and show loading state\n\t\t\t\t\tsubmitButton.disabled = true;\n\n                    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n                    const formData = new FormData(this);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch('/login', {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'X-CSRF-Token': csrfToken,\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\t\"email\": formData.get('email'),\n\t\t\t\t\t\t\t\t\"password\": formData.get('password'),\n\t\t\t\t\t\t\t\t\"remember_me\": formData.get('remember_me') === 'on',\n\t\t\t\t\t\t\t\t\"return_to\": formData.get('return_to'),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\t// Handle error response\n\t\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!result.message) {\n\t\t\t\t\t\t\t\tthrow new Error('Invalid server response');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tthrow new LoginError(`HTTP ${response.status}: ${result.message}`, result.message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// On success, redirect to dashboard or specified page\n\t\t\t\t\t\tconst redirectUrl = response.headers.get('X-Redirect-To');\n\t\t\t\t\t\tif (redirectUrl) {\n\t\t\t\t\t\t\twindow.location.href = redirectUrl;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error('Expected redirect after successful login, but none occurred.');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlet consoleMessage, userMessage;\n\n\t\t\t\t\t\tif (error instanceof LoginError) {\n\t\t\t\t\t\t\tconsoleMessage = error.systemMessage || error.message;\n\t\t\t\t\t\t\tuserMessage = error.userMessage || 'Login failed. Please try again.';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsoleMessage = error.message || 'An unexpected error occurred';\n\t\t\t\t\t\t\tuserMessage = 'An unexpected error occurred. Please try again.';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Handle network or other errors\n\t\t\t\t\t\tconsole.error(`Login error: ${consoleMessage}`);\n\t\t\t\t\t\terrorText.textContent = userMessage;\n\t\t\t\t\t\terrorDiv.classList.remove('hidden');\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Re-enable submit button\n\t\t\t\t\t\tsubmitButton.disabled = false;\n\t\t\t\t\t}\n                });\n            });\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = component.Layout(props.LayoutProps).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
