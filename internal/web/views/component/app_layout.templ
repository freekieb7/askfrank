package component

type MenuItem struct {
	Name     string
	Icon     string
	URL      string
	SubItems []MenuItem
	Active   bool
}

func openClassName(open bool) string {
	if open {
		return "open"
	}
	return ""
}

func activeClassName(active bool) string {
	if active {
		return "nav-link-active"
	}
	return ""
}

type AppLayoutProps struct {
	LayoutProps LayoutProps
	MenuItems   []MenuItem
}

templ AppLayout(props AppLayoutProps) {
	@Layout(props.LayoutProps) {
		// <link rel="stylesheet" href="/static/css/dashboard.css"/>
		<div class="flex h-screen bg-gray-50 dark:bg-gray-900">
			<!-- Sidebar -->
			<div class="hidden lg:flex lg:w-56 lg:flex-col lg:fixed lg:inset-y-0">
				<div class="flex flex-col grow pt-4 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto">
					<!-- Logo -->
					<div class="flex items-center shrink-0 px-3 pb-4">
						<div class="flex items-center">
							<i class="fas fa-heartbeat text-2xl mr-2 text-ocean dark:text-aqua"></i>
							<div>
								<h1 class="text-lg font-bold text-ocean dark:text-aqua">AskFrank</h1>
								<p class="text-xs text-gray-500 dark:text-gray-400">Healthcare</p>
							</div>
						</div>
					</div>
					<!-- Navigation -->
					<!-- Desktop Navigation -->
					<nav class="flex-1 pb-3 space-y-1 px-3">
						for _, item := range props.MenuItems {
							if item.SubItems != nil && len(item.SubItems) > 0 {
								<details class="sidebar-dropdown group" { openClassName(item.Active) }>
									<summary class={ "nav-link " + activeClassName(item.Active) }>
										<div class="flex items-center flex-1">
											<i class={ item.Icon + " w-4 h-4 mr-2.5" }></i>
											<span>{ item.Name }</span>
										</div>
										<svg class="w-4 h-4 transform group-open:rotate-90 transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
										</svg>
									</summary>
									<nav class="mt-1 space-y-1">
										for _, subItem := range item.SubItems {
											<a href={ subItem.URL } class={ "submenu-link " + activeClassName(subItem.Active) }>
												<i class={ subItem.Icon + " w-4 h-4 mr-2.5" }></i>
												<span>{ subItem.Name }</span>
											</a>
										}
									</nav>
								</details>
							} else {
								<a href={ item.URL } class={ "nav-link " + activeClassName(item.Active) }>
									<i class={ item.Icon + " w-4 h-4 mr-2.5" }></i>
									<span>{ item.Name }</span>
								</a>
							}
						}
					</nav>
				</div>
			</div>
			<!-- Mobile sidebar overlay -->
			<div class="lg:hidden fixed inset-0 z-50 hidden" id="mobile-sidebar-overlay">
				<!-- Overlay background -->
				<div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
				<!-- Mobile sidebar -->
				<div class="relative flex flex-col w-full max-w-xs bg-white dark:bg-gray-800 shadow-xl">
					<!-- Mobile sidebar header -->
					<div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
						<div class="flex items-center">
							<i class="fas fa-heartbeat text-2xl mr-2 text-ocean dark:text-aqua"></i>
							<div>
								<h1 class="text-lg font-bold text-ocean dark:text-aqua">AskFrank</h1>
								<p class="text-xs text-gray-500 dark:text-gray-400">Healthcare</p>
							</div>
						</div>
						<button type="button" class="p-2 text-gray-400 hover:text-gray-500 dark:hover:text-gray-300" id="close-sidebar">
							<i class="fas fa-times w-5 h-5"></i>
						</button>
					</div>
					<!-- Mobile navigation -->
					<!-- Mobile Navigation -->
					<nav class="flex-1 px-4 py-4 space-y-1 overflow-y-auto">
						for _, item := range props.MenuItems {
							if item.SubItems != nil && len(item.SubItems) > 0 {
								<details class="group">
									<summary class={ "nav-link " + activeClassName(item.Active) }>
										<div class="flex items-center flex-1">
											<i class={ item.Icon + " w-4 h-4 mr-2.5" }></i>
											<span>{ item.Name }</span>
										</div>
										<svg class="w-4 h-4 transform group-open:rotate-90 transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
										</svg>
									</summary>
									<nav class="mt-1 space-y-1">
										for _, subItem := range item.SubItems {
											<a href={ subItem.URL } class={ "submenu-link " + activeClassName(subItem.Active) }>
												<i class={ subItem.Icon + " w-4 h-4 mr-2.5" }></i>
												{ subItem.Name }
											</a>
										}
									</nav>
								</details>
							} else {
								<a href={ item.URL } class={ "nav-link " + activeClassName(item.Active) }>
									<i class={ item.Icon + " w-4 h-4 mr-2.5" }></i>
									{ item.Name }
								</a>
							}
						}
					</nav>
				</div>
			</div>
			<!-- Main content -->
			<div class="flex flex-col flex-1 lg:pl-56">
				<!-- Top bar -->
				<div class="sticky top-0 z-40 flex h-14 shrink-0 items-center gap-x-3 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 px-3 shadow-sm sm:gap-x-4 sm:px-4">
					<!-- Mobile menu button -->
					<button type="button" class="lg:hidden p-2 text-gray-700 dark:text-gray-300" id="mobile-menu-button">
						<i class="fas fa-bars w-4 h-4"></i>
					</button>
					<!-- Spacer -->
					<div class="flex-1"></div>
					<!-- Right side items -->
					<div class="flex items-center gap-x-2">
						<!-- Notifications -->
						// <button type="button" class="relative p-2 text-gray-400 dark:text-gray-500 hover:text-gray-500 dark:hover:text-gray-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700">
						// 	<i class="fas fa-bell w-5 h-5"></i>
						// 	<!-- Notification badge -->
						// 	<span class="absolute -top-0.5 -right-0.5 h-3.5 w-3.5 rounded-full bg-red-400 flex items-center justify-center">
						// 		<span class="text-xs font-medium text-white">3</span>
						// 	</span>
						// </button>
						<!-- Profile dropdown -->
						<div class="relative">
							<button type="button" class="flex items-center gap-x-2 text-sm font-medium leading-6 text-gray-900 dark:text-gray-100 rounded-lg p-1.5 hover:bg-gray-100 dark:hover:bg-gray-700" id="profile-menu-button">
								<img class="h-7 w-7 rounded-full bg-gray-50" src="https://ui-avatars.com/api/?name=Dr+Smith&background=05668D&color=fff" alt="Profile"/>
								<span class="hidden sm:flex sm:items-center">
									<span class="text-sm font-medium text-gray-700 dark:text-gray-300">Dr. Smith</span>
									<i class="fas fa-chevron-down ml-1.5 w-3 h-3 text-gray-400 dark:text-gray-500"></i>
								</span>
							</button>
							<!-- Dropdown menu -->
							<div class="dropdown absolute right-0 z-10 mt-2 w-44 origin-top-right rounded-lg bg-white dark:bg-gray-800 py-1.5 shadow-lg ring-1 ring-gray-900/5 dark:ring-gray-700/50 hidden" id="profile-dropdown">
								// <a href="/profile" class="block px-3 py-2 text-sm leading-6 text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md mx-1">
								// 	<i class="fas fa-user w-4 h-4 mr-2 text-gray-400 dark:text-gray-500"></i>
								// 	Profile
								// </a>
								// <a href="/settings" class="block px-3 py-2 text-sm leading-6 text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md mx-1">
								// 	<i class="fas fa-cog w-4 h-4 mr-2 text-gray-400 dark:text-gray-500"></i>
								// 	Settings
								// </a>
								<div class="border-t border-gray-100 dark:border-gray-700 my-1">
									<button type="button" id="logout-button" class="block w-full text-left px-3 py-2 text-sm leading-6 text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md mx-1">
										<i class="fas fa-sign-out-alt w-4 h-4 mr-2 text-gray-400 dark:text-gray-500"></i>
										Sign out
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
				<!-- Page content -->
				<main class="flex-1 py-4 overflow-y-auto">
					{ children... }
				</main>
			</div>
		</div>
		<script>
			// Initialize theme toggle appearance when DOM is loaded
			document.addEventListener('DOMContentLoaded', function() {
				const logoutButton = document.getElementById('logout-button');
				const profileButton = document.getElementById('profile-menu-button');
				const profileDropdown = document.getElementById('profile-dropdown');
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const mobileOverlay = document.getElementById('mobile-sidebar-overlay');
				const closeSidebar = document.getElementById('close-sidebar');

				// Logout functionality
				logoutButton.addEventListener('click', async function() {
					const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content')

					try {
						const response = await fetch('/logout', {
							method: 'POST',
							headers: {
								'X-CSRF-Token': csrfToken
							}
						});

						if (!response.ok) {
							throw new Error('Logout request failed');
						}

						const json = await response.json();
						if (!json.data.redirect_to) {
							throw new Error('No redirect URL provided');
						}

						window.location.href = json.data.redirect_to;
					} catch (error) {
						console.error('Error during logout:', error);
						alert('An error occurred during logout. Please try again.');
					}
				});

				// Profile dropdown functionality
				profileButton.addEventListener('click', function(e) {
					e.stopPropagation();
					profileDropdown.classList.toggle('hidden');
					if (!profileDropdown.classList.contains('hidden')) {
						setTimeout(() => profileDropdown.classList.add('show'), 10);
					} else {
						profileDropdown.classList.remove('show');
					}
				});

				// Close dropdown when clicking outside
				document.addEventListener('click', function() {
					profileDropdown.classList.add('hidden');
					profileDropdown.classList.remove('show');
				});

				// Mobile menu functionality
				mobileMenuButton.addEventListener('click', function() {
					mobileOverlay.classList.remove('hidden');
				});

				closeSidebar.addEventListener('click', function() {
					mobileOverlay.classList.add('hidden');
				});

				// Close mobile menu when clicking overlay
				mobileOverlay.addEventListener('click', function(e) {
					if (e.target === mobileOverlay || e.target.classList.contains('bg-opacity-75')) {
						mobileOverlay.classList.add('hidden');
					}
				});
			});
		</script>
	}
}
