package views

import (
	"hp/internal/web/views/component"
	"time"
)

type OAuthClient struct {
	ID            string
	Name          string
	Description   string
	RedirectURIs  []string
	IsPublic      bool
	Secret        string
	AllowedScopes []string
	ModifiedAt    time.Time
}

type OAuthClientsPageProps struct {
	component.AppLayoutProps
	Clients []OAuthClient
}

templ OAuthClientsPage(props OAuthClientsPageProps) {
	@component.AppLayout(props.AppLayoutProps) {
		<div class="main-content">
			<div class="p-6">
				<div class="toolbar">
					<div>
						<h1 class="page-title">Developer Portal</h1>
						<p class="page-subtitle">Manage your OAuth Clients and API access</p>
					</div>
					<button
						type="button"
						class="btn-primary"
						onclick="document.getElementById('createClientModal').classList.remove('hidden')"
					>
						<i class="fas fa-plus icon-with-text"></i> Create New Client
					</button>
				</div>
				<!-- OAuth Clients List -->
				<div class="card">
					<div class="p-4 border-b border-gray-200 dark:border-gray-700">
						<h2 class="card-title mb-0">Your OAuth Clients</h2>
						<p class="card-subtitle">Applications that can request access to user data</p>
					</div>
					if len(props.Clients) == 0 {
						<div class="empty-state">
							<p class="text-muted">You haven't created any OAuth clients yet.</p>
							<p class="text-sm mt-2 text-muted">Create a client to integrate with AskFrank's API</p>
						</div>
					} else {
						<div class="table-container">
							<table class="table">
								<thead>
									<tr>
										<th>Name</th>
										<th>Client ID</th>
										<th>Type</th>
										<th>Redirect URIs</th>
										<th>Modified at</th>
										<th class="text-right">Actions</th>
									</tr>
								</thead>
								<tbody>
									for _, client := range props.Clients {
										<tr>
											<td>
												<div class="text-sm font-medium">{ client.Name }</div>
												if client.Description != "" {
													<div class="text-xs text-muted">{ client.Description }</div>
												}
											</td>
											<td>
												<div class="text-sm text-muted">{ client.ID }</div>
											</td>
											<td>
												if client.IsPublic {
													<span class="badge-success">
														Public
													</span>
												} else {
													<span class="badge-primary">
														Confidential
													</span>
												}
											</td>
											<td>
												<div class="text-sm text-muted max-h-16 overflow-y-auto">
													for i, uri := range client.RedirectURIs {
														if i < 2 {
															<div class="truncate max-w-xs">{ uri }</div>
														} else if i == 2 && len(client.RedirectURIs) > 3 {
															<div>+{ len(client.RedirectURIs) - 2 } more...</div>
															break
														} else if i < 3 {
															<div class="truncate max-w-xs">{ uri }</div>
														}
													}
												</div>
											</td>
											<td class="text-sm text-muted">
												{ client.ModifiedAt.Format("Jan 02, 2006") }
											</td>
											<td class="text-right text-sm font-medium">
												<button
													type="button"
													class="text-primary hover:text-primary-600 mr-3"
													onclick={ templ.JSFuncCall("showClientDetails", client.ID) }
												>
													<i class="fas fa-eye"></i>
												</button>
												<button
													type="button"
													class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
													onclick={ templ.JSFuncCall("confirmDeleteClient", client.ID, client.Name) }
												>
													<i class="fas fa-trash-alt"></i>
												</button>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
				<!-- Create Client Modal -->
				<div id="createClientModal" class="modal-overlay hidden">
					<div class="modal-content max-w-md">
						<div class="modal-header">
							<h3 class="modal-title">Create New OAuth Client</h3>
							<button type="button" class="modal-close" onclick="document.getElementById('createClientModal').classList.add('hidden')">
								<i class="fas fa-times"></i>
							</button>
						</div>
						<form id="createClientForm" class="p-4" onsubmit="event.preventDefault(); createOAuthClient();">
							<div class="mb-4">
								<label for="clientName" class="form-label">Client Name</label>
								<input
									type="text"
									id="clientName"
									name="name"
									required
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-ocean-500 focus:border-ocean-500 dark:bg-gray-700 dark:text-white"
									placeholder="My Application"
								/>
							</div>
							<div class="mb-4">
								<label for="clientDescription" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description (optional)</label>
								<input
									type="text"
									id="clientDescription"
									name="description"
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-ocean-500 focus:border-ocean-500 dark:bg-gray-700 dark:text-white"
									placeholder="A brief description of your application"
								/>
							</div>
							<div class="mb-4">
								<label for="redirectURIs" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Redirect URIs (one per line)</label>
								<textarea
									id="redirectURIs"
									name="redirectURIs"
									required
									rows="3"
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-ocean-500 focus:border-ocean-500 dark:bg-gray-700 dark:text-white"
									placeholder="https://example.com/callback"
								></textarea>
								<p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Must be valid URLs, including http:// or https://</p>
							</div>
							<div class="mb-4">
								<label for="clientType" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Client Type</label>
								<select
									id="clientType"
									name="is_public"
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-ocean-500 focus:border-ocean-500 dark:bg-gray-700 dark:text-white"
								>
									<option value="false">Confidential (with client secret)</option>
									<option value="true">Public (no client secret)</option>
								</select>
							</div>
							<div class="mb-4">
								<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Allowed Scopes</label>
								<div class="space-y-2">
									<div class="flex items-center">
										<input type="checkbox" id="scope_read" name="scopes" value="read" class="h-4 w-4 text-ocean-600 focus:ring-ocean-500 border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700" checked/>
										<label for="scope_read" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Read</label>
									</div>
									<div class="flex items-center">
										<input type="checkbox" id="scope_write" name="scopes" value="write" class="h-4 w-4 text-ocean-600 focus:ring-ocean-500 border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700"/>
										<label for="scope_write" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Write</label>
									</div>
								</div>
							</div>
							<div class="flex justify-end pt-2 border-t border-gray-200 dark:border-gray-700">
								<button
									type="button"
									class="px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-650 focus:outline-none mr-2"
									onclick="document.getElementById('createClientModal').classList.add('hidden')"
								>
									Cancel
								</button>
								<button
									type="button"
									id="createClientButton"
									class="px-3 py-1.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-ocean hover:bg-ocean-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ocean-500 dark:focus:ring-offset-gray-800"
									onclick="createOAuthClient()"
								>
									Create Client
								</button>
							</div>
						</form>
					</div>
				</div>
				<!-- Client Details Modal -->
				<div id="clientDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-lg w-full">
						<div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
							<h3 class="text-lg font-medium text-gray-900 dark:text-white" id="detailsClientName">Client Details</h3>
							<button type="button" class="text-gray-400 hover:text-gray-500" onclick="document.getElementById('clientDetailsModal').classList.add('hidden')">
								<i class="fas fa-times"></i>
							</button>
						</div>
						<div class="p-4">
							<div class="mb-4">
								<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Client ID</h4>
								<div class="mt-1 flex items-center">
									<pre id="detailsClientId" class="text-sm bg-gray-100 dark:bg-gray-700 p-2 rounded w-full overflow-x-auto"></pre>
									<button class="ml-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300" onclick="copyToClipboard('detailsClientId')">
										<i class="fas fa-copy"></i>
									</button>
								</div>
							</div>
							<div id="secretContainer" class="mb-4">
								<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Client Secret</h4>
								<div class="mt-1 flex items-center">
									<pre id="detailsClientSecret" class="text-sm bg-gray-100 dark:bg-gray-700 p-2 rounded w-full overflow-x-auto"></pre>
									<button class="ml-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300" onclick="copyToClipboard('detailsClientSecret')">
										<i class="fas fa-copy"></i>
									</button>
								</div>
								<p class="mt-1 text-xs text-red-500">Note: This is the only time you'll see the full client secret. Save it securely.</p>
							</div>
							<div class="mb-4">
								<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Redirect URIs</h4>
								<div class="mt-1">
									<ul id="detailsRedirectUris" class="text-sm bg-gray-100 dark:bg-gray-700 p-2 rounded"></ul>
								</div>
							</div>
							<div class="mb-4">
								<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Allowed Scopes</h4>
								<div class="mt-1">
									<div id="detailsScopes" class="text-sm bg-gray-100 dark:bg-gray-700 p-2 rounded"></div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<!-- Delete Confirmation Modal -->
				<div id="deleteClientModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
						<div class="p-4">
							<div class="flex items-center justify-center text-red-500 mb-4">
								<i class="fas fa-exclamation-triangle text-4xl"></i>
							</div>
							<h3 class="text-lg font-medium text-center text-gray-900 dark:text-white mb-2">Delete OAuth Client</h3>
							<p class="text-sm text-center text-gray-500 dark:text-gray-400 mb-4">Are you sure you want to delete <span id="deleteClientName" class="font-medium"></span>? This action cannot be undone.</p>
							<form id="deleteClientForm" class="flex justify-center space-x-4" onsubmit="event.preventDefault();">
								<input type="hidden" id="deleteClientId" name="clientId"/>
								<button
									type="button"
									class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-650 focus:outline-none"
									onclick="document.getElementById('deleteClientModal').classList.add('hidden')"
								>
									Cancel
								</button>
								<button
									type="button"
									onclick="deleteOAuthClient(document.getElementById('deleteClientId').value)"
									class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800"
								>
									Delete
								</button>
							</form>
						</div>
					</div>
				</div>
				<script>
					async function createOAuthClient() {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}

						// Get form values
						const name = document.getElementById('clientName').value;
						const description = document.getElementById('clientDescription').value;
						const redirectURIs = document.getElementById('redirectURIs').value;
						const isPublic = document.getElementById('clientType').value;
						
						// Get selected scopes
						const selectedScopes = [];
						if (document.getElementById('scope_read').checked) {
							selectedScopes.push('read');
						}
						if (document.getElementById('scope_write').checked) {
							selectedScopes.push('write');
						}
						
						// Validate form
						if (!name) {
							alert('Client name is required');
							return;
						}
						if (!redirectURIs) {
							alert('At least one redirect URI is required');
							return;
						}
						if (selectedScopes.length === 0) {
							alert('At least one scope must be selected');
							return;
						}
						
						// Disable button and show loading state
						const button = document.getElementById('createClientButton');
						button.disabled = true;
						button.textContent = 'Creating...';
						
						try {
							// Send request to create client
							const response = await fetch('/developer/clients', {
								method: 'POST',
								headers: {
									'X-CSRF-Token': csrfToken,
									'Content-Type': 'application/x-www-form-urlencoded',
								},
								body: new URLSearchParams({
									'name': name,
									'description': description,
									'redirectURIs': redirectURIs,
									'isPublic': isPublic,
									'scopes': selectedScopes.join(',')
								})
							});
							
							if (!response.ok) {
								throw new Error(`HTTP error! status: ${response.status}`);
							}
							
							const data = await response.json();
							
							// Hide the modal
							document.getElementById('createClientModal').classList.add('hidden');
							
							// Show success and client details if available
							if (data.id) {
								// Show the client details in the details modal
								document.getElementById('detailsClientName').textContent = data.name;
								document.getElementById('detailsClientId').textContent = data.id;
								
								// Show or hide secret based on client type
								const secretContainer = document.getElementById('secretContainer');
								if (data.isPublic) {
									secretContainer.classList.add('hidden');
								} else {
									secretContainer.classList.remove('hidden');
									document.getElementById('detailsClientSecret').textContent = data.secret || 'N/A';
								}
								
								// Show redirect URIs
								const uriList = document.getElementById('detailsRedirectUris');
								uriList.innerHTML = '';
								data.redirectURIs.forEach(uri => {
									const li = document.createElement('li');
									li.textContent = uri;
									uriList.appendChild(li);
								});
								
								// Show scopes
								const scopesEl = document.getElementById('detailsScopes');
								scopesEl.innerHTML = '';
								if (data.allowedScopes && data.allowedScopes.length > 0) {
									scopesEl.textContent = data.allowedScopes.join(', ');
								} else {
									scopesEl.textContent = 'No scopes defined';
								}
								
								// Show the details modal
								document.getElementById('clientDetailsModal').classList.remove('hidden');
							} else {
								// If we don't have details, just reload the page
								window.location.reload();
							}
						} catch (error) {
							console.error('Error creating OAuth client:', error);
							alert('Failed to create OAuth client. Please try again.');
						} finally {
							// Reset button state
							button.disabled = false;
							button.textContent = 'Create Client';
							
							// Reset form
							document.getElementById('createClientForm').reset();
						}
					}
					
					function showClientDetails(clientId) {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}
						
						// Fetch client details from the server
						fetch(`/api/developer/clients/${clientId}`, {
							headers: {
								'X-CSRF-Token': csrfToken
							}
						})
							.then(response => response.json())
							.then(client => {
								document.getElementById('detailsClientName').textContent = client.name;
								document.getElementById('detailsClientId').textContent = client.id;
								
								// Show or hide secret based on client type
								const secretContainer = document.getElementById('secretContainer');
								if (client.isPublic) {
									secretContainer.classList.add('hidden');
								} else {
									secretContainer.classList.remove('hidden');
									document.getElementById('detailsClientSecret').textContent = client.secret || 'N/A';
								}
								
								// Show redirect URIs
								const uriList = document.getElementById('detailsRedirectUris');
								uriList.innerHTML = '';
								client.redirectURIs.forEach(uri => {
									const li = document.createElement('li');
									li.textContent = uri;
									uriList.appendChild(li);
								});
								
								// Show scopes
								const scopesEl = document.getElementById('detailsScopes');
								scopesEl.innerHTML = '';
								if (client.allowedScopes && client.allowedScopes.length > 0) {
									scopesEl.textContent = client.allowedScopes.join(', ');
								} else {
									scopesEl.textContent = 'No scopes defined';
								}
								
								document.getElementById('clientDetailsModal').classList.remove('hidden');
							})
							.catch(error => {
								console.error('Error fetching client details:', error);
								alert('Failed to load client details');
							});
					}
					
					function confirmDeleteClient(clientId, clientName) {
						document.getElementById('deleteClientName').textContent = clientName;
						document.getElementById('deleteClientId').value = clientId;
						document.getElementById('deleteClientModal').classList.remove('hidden');
					}
					
					async function deleteOAuthClient(clientId) {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}
						
						try {
							// Send delete request
							const response = await fetch(`/developer/clients/${clientId}/delete`, {
								method: 'POST',
								headers: {
									'X-CSRF-Token': csrfToken
								}
							});
							
							if (!response.ok) {
								throw new Error(`HTTP error! status: ${response.status}`);
							}
							
							// Hide the modal and refresh the page
							document.getElementById('deleteClientModal').classList.add('hidden');
							window.location.reload();
						} catch (error) {
							console.error('Error deleting OAuth client:', error);
							alert('Failed to delete OAuth client. Please try again.');
						}
					}
					
					function copyToClipboard(elementId) {
						const text = document.getElementById(elementId).textContent;
						navigator.clipboard.writeText(text).then(() => {
							// Show a temporary tooltip or notification
							alert('Copied to clipboard!');
						});
					}
				</script>
			</div>
		</div>
	}
}
