package views

import "github.com/gofiber/fiber/v2"
import "hp/internal/web/views/component"

templ LoginPage(c *fiber.Ctx, t Translate) {
    @component.Layout("AskFrank - The Foundation for Data-Driven Healthcare", c) {
        <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
            <div class="max-w-md w-full space-y-8">
                <div>
                    <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                        Sign in to your account
                    </h2>
                </div>
                
                <!-- Error Message -->
                <div id="errorDiv" class="hidden rounded-md bg-red-50 p-4">
                    <div class="flex">
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800">
                                <span id="errorText">Error occurred</span>
                            </h3>
                        </div>
                    </div>
                </div>
                
                <!-- Success Message -->
                <div id="successDiv" class="hidden rounded-md bg-green-50 p-4">
                    <div class="flex">
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-green-800">
                                <span id="successText">Success!</span>
                            </h3>
                        </div>
                    </div>
                </div>
                
                <form id="loginForm" class="mt-8 space-y-6">
                    <div class="rounded-md shadow-sm -space-y-px">
                        <div>
                            <label for="email" class="sr-only">Email address</label>
                            <input id="email" name="email" type="email" autocomplete="email" required class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="Email address"/>
                        </div>
                        <div>
                            <label for="password" class="sr-only">Password</label>
                            <input id="password" name="password" type="password" autocomplete="current-password" required class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="Password"/>
                        </div>
                    </div>
                    <div>
                        <button type="submit" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Sign in
                        </button>
                    </div>
                </form>
            </div>
        </div>
        <script>
            document.getElementById('loginForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
                const formData = new FormData(this);
                const errorDiv = document.getElementById('errorDiv');
                const successDiv = document.getElementById('successDiv');
                const errorText = document.getElementById('errorText');
                const successText = document.getElementById('successText');
                
                // Hide previous messages
                errorDiv.classList.add('hidden');
                successDiv.classList.add('hidden');
                
                try {
                    const response = await fetch('/login', {
                        method: 'POST',
                        headers: {
                            'X-Csrf-Token': csrfToken,
                        },
                        body: formData
                    });

                    if (response.redirected) {
                        // Successful login, redirect
                        successText.textContent = 'Login successful! Redirecting...';
                        successDiv.classList.remove('hidden');
                        setTimeout(() => {
                            window.location.href = response.url;
                        }, 1000);
                        return;
                    }
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        // Show error message
                        errorText.textContent = result.error || 'Login failed';
                        errorDiv.classList.remove('hidden');
                    } else {
                        // Show success message
                        successText.textContent = 'Login successful! Redirecting...';
                        successDiv.classList.remove('hidden');
                        setTimeout(() => {
                            window.location.href = '/account';
                        }, 1000);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    errorText.textContent = 'An unexpected error occurred';
                    errorDiv.classList.remove('hidden');
                }
            });
        </script>
    }
}
