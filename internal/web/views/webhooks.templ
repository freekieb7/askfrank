package views

import (
	"fmt"
	"hp/internal/web/views/component"
	"strings"
	"time"
)

type Webhook struct {
	ID           string
	Name         string
	Description  string
	URL          string
	IsActive     bool
	EventTypes   []string
	Activity     time.Time
	ResponseTime time.Time
	ErrorRate    float32
}

type WebhooksPageProps struct {
	component.AppLayoutProps
	Webhooks []Webhook
}

templ WebhooksPage(props WebhooksPageProps) {
	@component.AppLayout(props.AppLayoutProps) {
		<div class="main-content">
			<div class="p-6">
				<div class="toolbar">
					<div>
						<h1 class="page-title">Developer Portal</h1>
						<p class="page-subtitle">Manage your OAuth Clients and API access</p>
					</div>
					<button
						type="button"
						class="btn-primary"
						onclick="document.getElementById('createWebhookModal').classList.remove('hidden')"
					>
						<i class="fas fa-plus icon-with-text"></i> Create New Webhook
					</button>
				</div>
				<!-- Webhook List -->
				<div class="card">
					<div class="p-4 border-b border-gray-200 dark:border-gray-700">
						<h2 class="card-title mb-0">Your Webhooks</h2>
						<p class="card-subtitle">Applications that can receive webhook events</p>
					</div>
					if len(props.Webhooks) == 0 {
						<div class="empty-state">
							<p class="text-muted">You haven't created any webhooks yet.</p>
							<p class="text-sm mt-2 text-muted">Create a webhook to integrate with AskFrank's API</p>
						</div>
					} else {
						<div class="table-container">
							<table class="table">
								<thead>
									<tr>
										<th>Endpoint</th>
										<th>Description</th>
										<th>Listening to</th>
										<th>Response time</th>
										<th>Error rate</th>
										<th class="text-right">Actions</th>
									</tr>
								</thead>
								<tbody>
									for _, webhook := range props.Webhooks {
										<tr>
											<td>
												<div class="text-sm font-medium">{ webhook.Name }</div>
												<div class="text-xs text-muted">{ webhook.URL }</div>
											</td>
											<td>
												<div class="text-sm text-muted">{ webhook.Description }</div>
											</td>
											<td>
												<div class="text-sm text-muted">
													{ len(webhook.EventTypes) } events
													<span class="tooltip">{ strings.Join(webhook.EventTypes, ", ") }</span>
												</div>
											</td>
											<td class="text-sm text-muted">
												if webhook.Activity.IsZero() {
													Never
												} else {
													{ webhook.Activity.Format("Jan 2, 2006 15:04") }
												}
											</td>
											<td class="text-sm text-muted">
												if webhook.ResponseTime.IsZero() {
													Never
												} else {
													{ webhook.ResponseTime.Format("Jan 2, 2006 15:04") }
												}
											</td>
											<td class="text-sm text-muted">
												<div>{{ fmt.Sprintf("%.2f%%", webhook.ErrorRate) }}</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
				<!-- Create Webhook Modal -->
				<div id="createWebhookModal" class="modal-overlay hidden">
					<div class="modal-content">
						<div class="modal-header">
							<h3 class="modal-title">Create New Webhook</h3>
							<button type="button" class="modal-close" onclick="document.getElementById('createWebhookModal').classList.add('hidden')">
								<i class="fas fa-times"></i>
							</button>
						</div>
						<form id="createWebhookForm" class="p-4" onsubmit="event.preventDefault(); createWebhook();">
							<div class="mb-4">
								<label for="webhookName" class="form-label">Client Name</label>
								<input
									type="text"
									id="webhookName"
									name="name"
									required
									class="form-input"
									placeholder="My Application"
								/>
							</div>
							<div class="mb-4">
								<label for="webhookDescription" class="form-label">Description (optional)</label>
								<input
									type="text"
									id="webhookDescription"
									name="description"
									class="form-input"
									placeholder="A brief description of your application"
								/>
							</div>
							<div class="mb-4">
								<label for="webhookURL" class="form-label">Webhook URL</label>
								<input
									type="text"
									id="webhookURL"
									name="url"
									class="form-input"
									placeholder="https://example.com/webhook"
								/>
							</div>
							<div class="mb-4">
								<label class="form-label">Allowed Scopes</label>
								<div class="space-y-2">
									<div class="flex items-center">
										<input type="checkbox" id="scope_read" name="scopes" value="read" class="form-checkbox" checked/>
										<label for="scope_read" class="ml-2 block text-sm">Read</label>
									</div>
									<div class="flex items-center">
										<input type="checkbox" id="scope_write" name="scopes" value="write" class="form-checkbox"/>
										<label for="scope_write" class="ml-2 block text-sm">Write</label>
									</div>
								</div>
							</div>
							<div class="modal-footer">
								<button
									type="button"
									class="btn-secondary"
									onclick="document.getElementById('createWebhookModal').classList.add('hidden')"
								>
									Cancel
								</button>
								<button
									type="button"
									id="createWebhookButton"
									class="btn-primary"
									onclick="createWebhook()"
								>
									Create Webhook
								</button>
							</div>
						</form>
					</div>
				</div>
				<!-- Delete Confirmation Modal -->
				<div id="deleteWebhookModal" class="modal-overlay hidden">
					<div class="modal-content max-w-md">
						<div class="p-4">
							<div class="flex items-center justify-center text-red-500 mb-4">
								<i class="fas fa-exclamation-triangle text-4xl"></i>
							</div>
							<h3 class="modal-title text-center mb-2">Delete Webhook</h3>
							<p class="text-sm text-center text-muted mb-4">Are you sure you want to delete <span id="deleteWebhookName" class="font-medium"></span>? This action cannot be undone.</p>
							<form id="deleteWebhookForm" class="flex justify-center space-x-4" onsubmit="event.preventDefault();">
								<input type="hidden" id="deleteWebhookId" name="webhookId"/>
								<button
									type="button"
									class="btn-secondary"
									onclick="document.getElementById('deleteWebhookModal').classList.add('hidden')"
								>
									Cancel
								</button>
								<button
									type="button"
									onclick="deleteWebhook(document.getElementById('deleteWebhookId').value)"
									class="btn-danger"
								>
									Delete
								</button>
							</form>
						</div>
					</div>
				</div>
				<script>
					async function createWebhook() {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}

						// Get form values
						const name = document.getElementById('webhookName').value;
						const description = document.getElementById('webhookDescription').value;

						// Get selected event types
						const selectedEventTypes = [];
						if (document.getElementById('event_type_1').checked) {
							selectedEventTypes.push('event_type_1');
						}
						if (document.getElementById('event_type_2').checked) {
							selectedEventTypes.push('event_type_2');
						}
						
						// Validate form
						if (!name) {
							alert('Webhook name is required');
							return;
						}
						if (selectedEventTypes.length === 0) {
							alert('At least one event type must be selected');
							return;
						}
						
						// Disable button and show loading state
						const button = document.getElementById('createWebhookButton');
						button.disabled = true;
						button.textContent = 'Creating...';
						
                        // todo from here do more
						try {
							// Send request to create webhook
							const response = await fetch('/developer/webhooks/create-webhook', {
								method: 'POST',
								headers: {
									'X-CSRF-Token': csrfToken,
									'Content-Type': 'application/x-www-form-urlencoded',
								},
								body: new URLSearchParams({
									'name': name,
									'description': description,
									'redirectURIs': redirectURIs,
									'isPublic': isPublic,
									'scopes': selectedScopes.join(',')
								})
							});
							
							if (!response.ok) {
								throw new Error(`HTTP error! status: ${response.status}`);
							}
							
							const data = await response.json();
							
							// Hide the modal
							document.getElementById('createClientModal').classList.add('hidden');
							
							// Show success and client details if available
							if (data.id) {
								// Show the client details in the details modal
								document.getElementById('detailsClientName').textContent = data.name;
								document.getElementById('detailsClientId').textContent = data.id;
								
								// Show or hide secret based on client type
								const secretContainer = document.getElementById('secretContainer');
								if (data.isPublic) {
									secretContainer.classList.add('hidden');
								} else {
									secretContainer.classList.remove('hidden');
									document.getElementById('detailsClientSecret').textContent = data.secret || 'N/A';
								}
								
								// Show redirect URIs
								const uriList = document.getElementById('detailsRedirectUris');
								uriList.innerHTML = '';
								data.redirectURIs.forEach(uri => {
									const li = document.createElement('li');
									li.textContent = uri;
									uriList.appendChild(li);
								});
								
								// Show scopes
								const scopesEl = document.getElementById('detailsScopes');
								scopesEl.innerHTML = '';
								if (data.allowedScopes && data.allowedScopes.length > 0) {
									scopesEl.textContent = data.allowedScopes.join(', ');
								} else {
									scopesEl.textContent = 'No scopes defined';
								}
								
								// Show the details modal
								document.getElementById('clientDetailsModal').classList.remove('hidden');
							} else {
								// If we don't have details, just reload the page
								window.location.reload();
							}
						} catch (error) {
							console.error('Error creating OAuth client:', error);
							alert('Failed to create OAuth client. Please try again.');
						} finally {
							// Reset button state
							button.disabled = false;
							button.textContent = 'Create Client';
							
							// Reset form
							document.getElementById('createClientForm').reset();
						}
					}
					
					function showClientDetails(clientId) {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}
						
						// Fetch client details from the server
						fetch(`/api/developer/clients/${clientId}`, {
							headers: {
								'X-CSRF-Token': csrfToken
							}
						})
							.then(response => response.json())
							.then(client => {
								document.getElementById('detailsClientName').textContent = client.name;
								document.getElementById('detailsClientId').textContent = client.id;
								
								// Show or hide secret based on client type
								const secretContainer = document.getElementById('secretContainer');
								if (client.isPublic) {
									secretContainer.classList.add('hidden');
								} else {
									secretContainer.classList.remove('hidden');
									document.getElementById('detailsClientSecret').textContent = client.secret || 'N/A';
								}
								
								// Show redirect URIs
								const uriList = document.getElementById('detailsRedirectUris');
								uriList.innerHTML = '';
								client.redirectURIs.forEach(uri => {
									const li = document.createElement('li');
									li.textContent = uri;
									uriList.appendChild(li);
								});
								
								// Show scopes
								const scopesEl = document.getElementById('detailsScopes');
								scopesEl.innerHTML = '';
								if (client.allowedScopes && client.allowedScopes.length > 0) {
									scopesEl.textContent = client.allowedScopes.join(', ');
								} else {
									scopesEl.textContent = 'No scopes defined';
								}
								
								document.getElementById('clientDetailsModal').classList.remove('hidden');
							})
							.catch(error => {
								console.error('Error fetching client details:', error);
								alert('Failed to load client details');
							});
					}
					
					function confirmDeleteClient(clientId, clientName) {
						document.getElementById('deleteClientName').textContent = clientName;
						document.getElementById('deleteClientId').value = clientId;
						document.getElementById('deleteClientModal').classList.remove('hidden');
					}
					
					async function deleteOAuthClient(clientId) {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}
						
						try {
							// Send delete request
							const response = await fetch(`/developer/clients/${clientId}/delete`, {
								method: 'POST',
								headers: {
									'X-CSRF-Token': csrfToken
								}
							});
							
							if (!response.ok) {
								throw new Error(`HTTP error! status: ${response.status}`);
							}
							
							// Hide the modal and refresh the page
							document.getElementById('deleteClientModal').classList.add('hidden');
							window.location.reload();
						} catch (error) {
							console.error('Error deleting OAuth client:', error);
							alert('Failed to delete OAuth client. Please try again.');
						}
					}
					
					function copyToClipboard(elementId) {
						const text = document.getElementById(elementId).textContent;
						navigator.clipboard.writeText(text).then(() => {
							// Show a temporary tooltip or notification
							alert('Copied to clipboard!');
						});
					}
				</script>
			</div>
		</div>
	}
}
