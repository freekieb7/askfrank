package views

import (
	"fmt"
	"hp/internal/web/views/component"
	"strings"
	"time"
)

type WebhookSubscription struct {
	ID           string
	Name         string
	Description  string
	URL          string
	IsActive     bool
	EventTypes   []string
	Activity     time.Time
	ResponseTime time.Time
	ErrorRate    float32
}

type WebhooksPageProps struct {
	component.AppLayoutProps
	Subscriptions []WebhookSubscription
	EventTypes    []string
}

templ WebhooksPage(props WebhooksPageProps) {
	@component.AppLayout(props.AppLayoutProps) {
		<div class="main-content">
			<div class="p-6">
				<div class="toolbar">
					<div>
						<h1 class="page-title">Developer Portal</h1>
						<p class="page-subtitle">Manage your OAuth Clients and API access</p>
					</div>
					<button
						type="button"
						class="btn-primary"
						onclick="document.getElementById('createWebhookModal').classList.remove('hidden')"
					>
						<i class="fas fa-plus icon-with-text"></i> Create New Webhook
					</button>
				</div>
				<!-- Webhook List -->
				<div class="card">
					<div class="p-4 border-b border-gray-200 dark:border-gray-700">
						<h2 class="card-title mb-0">Your Webhooks</h2>
						<p class="card-subtitle">Applications that can receive webhook events</p>
					</div>
					if len(props.Subscriptions) == 0 {
						<div class="empty-state">
							<p class="text-muted">You haven't created any subscriptions yet.</p>
							<p class="text-sm mt-2 text-muted">Create a subscription to integrate with AskFrank's API</p>
						</div>
					} else {
						<div class="table-container">
							<table class="table">
								<thead>
									<tr>
										<th>Endpoint</th>
										<th>Description</th>
										<th>Listening to</th>
										<th>Response time</th>
										<th>Error rate</th>
										<th class="text-right">Actions</th>
									</tr>
								</thead>
								<tbody>
									for _, subscription := range props.Subscriptions {
										<tr>
											<td>
												<div class="text-sm font-medium">{ subscription.Name }</div>
												<div class="text-xs text-muted">{ subscription.URL }</div>
											</td>
											<td>
												<div class="text-sm text-muted">{ subscription.Description }</div>
											</td>
											<td>
												<div class="text-sm text-muted">
													{ len(subscription.EventTypes) } events
													<span class="tooltip">{ strings.Join(subscription.EventTypes, ", ") }</span>
												</div>
											</td>
											<td class="text-sm text-muted">
												if subscription.Activity.IsZero() {
													Never
												} else {
													{ subscription.Activity.Format("Jan 2, 2006 15:04") }
												}
											</td>
											<td class="text-sm text-muted">
												if subscription.ResponseTime.IsZero() {
													Never
												} else {
													{ subscription.ResponseTime.Format("Jan 2, 2006 15:04") }
												}
											</td>
											<td class="text-sm text-muted">
												<div>{ fmt.Sprintf("%.2f%%", subscription.ErrorRate) }</div>
											</td>
											<td class="text-right">
												<div class="flex items-center justify-end space-x-2">
													<button
														type="button"
														onclick={ templ.JSFuncCall("confirmDeleteWebhook", subscription.ID, subscription.Name) }
														class="btn-danger btn-sm"
													>
														<i class="fas fa-trash"></i>
													</button>
												</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
				<!-- Create Webhook Modal -->
				<div id="createWebhookModal" class="modal-overlay hidden">
					<div class="modal-container">
						<div class="modal-content">
							<div class="modal-header">
								<h3 class="modal-title">Create New Webhook</h3>
								<button type="button" class="modal-close" onclick="document.getElementById('createWebhookModal').classList.add('hidden')">
									<i class="fas fa-times"></i>
								</button>
							</div>
							<form id="createWebhookForm" class="p-4" onsubmit="event.preventDefault(); createWebhook();">
								<div class="mb-4">
									<label for="webhookName" class="form-label">Name</label>
									<input
										type="text"
										id="webhookName"
										name="name"
										required
										class="form-input"
										placeholder="My Application"
									/>
								</div>
								<div class="mb-4">
									<label for="webhookDescription" class="form-label">Description (optional)</label>
									<input
										type="text"
										id="webhookDescription"
										name="description"
										class="form-input"
										placeholder="A brief description of your application"
									/>
								</div>
								<div class="mb-4">
									<label for="webhookURL" class="form-label">Webhook URL</label>
									<input
										type="text"
										id="webhookURL"
										name="url"
										class="form-input"
										placeholder="https://example.com/webhook"
									/>
								</div>
								<div class="mb-4">
									<label class="form-label">Event Types</label>
									<div class="space-y-2">
										for i, eventType := range props.EventTypes {
											<div class="flex items-center">
												<input
													type="checkbox"
													id={ fmt.Sprintf("event_type_%d", i) }
													name="eventTypes"
													value={ eventType }
													class="form-checkbox"
												/>
												<label for={ fmt.Sprintf("event_type_%d", i) } class="ml-2 block text-sm">{ eventType }</label>
											</div>
										}
									</div>
								</div>
								<div class="modal-footer">
									<button
										type="button"
										class="btn-secondary"
										onclick="document.getElementById('createWebhookModal').classList.add('hidden')"
									>
										Cancel
									</button>
									<button
										type="button"
										id="createWebhookButton"
										class="btn-primary"
										onclick="createWebhook()"
									>
										Create Webhook
									</button>
								</div>
							</form>
						</div>
					</div>
				</div>
				<!-- Delete Confirmation Modal -->
				<div id="deleteWebhookModal" class="modal-overlay hidden">
					<div class="modal-container">
						<div class="modal-content max-w-md">
							<div class="p-4">
								<div class="flex items-center justify-center text-red-500 mb-4">
									<i class="fas fa-exclamation-triangle text-4xl"></i>
								</div>
								<h3 class="modal-title text-center mb-2">Delete Webhook</h3>
								<p class="text-sm text-center text-muted mb-4">Are you sure you want to delete <span id="deleteWebhookName" class="font-medium"></span>? This action cannot be undone.</p>
								<form id="deleteWebhookForm" class="flex justify-center space-x-4" onsubmit="event.preventDefault();">
									<input type="hidden" id="deleteWebhookId" name="webhookId"/>
									<button
										type="button"
										class="btn-secondary"
										onclick="document.getElementById('deleteWebhookModal').classList.add('hidden')"
									>
										Cancel
									</button>
									<button
										type="button"
										onclick="deleteWebhook(document.getElementById('deleteWebhookId').value)"
										class="btn-danger"
									>
										Delete
									</button>
								</form>
							</div>
						</div>
					</div>
				</div>
				<script>
					async function createWebhook() {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}

						// Get form values
						const name = document.getElementById('webhookName').value;
						const description = document.getElementById('webhookDescription').value;
						const url = document.getElementById('webhookURL').value;

						// Get selected event types
						const selectedEventTypes = [];
						const checkboxes = document.querySelectorAll('input[name="eventTypes"]:checked');
						checkboxes.forEach(checkbox => {
							selectedEventTypes.push(checkbox.value);
						});
						
						// Validate form
						if (!name) {
							alert('Webhook name is required');
							return;
						}
						if (!url) {
							alert('Webhook URL is required');
							return;
						}
						if (selectedEventTypes.length === 0) {
							alert('At least one event type must be selected');
							return;
						}
						
						// Disable button and show loading state
						const button = document.getElementById('createWebhookButton');
						button.disabled = true;
						button.textContent = 'Creating...';
						
						try {
							// Send request to create webhook
							const response = await fetch('/developers/webhooks', {
								method: 'POST',
								headers: {
									'X-CSRF-Token': csrfToken,
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									name: name,
									description: description,
									url: url,
									event_types: selectedEventTypes
								})
							});
							
							if (!response.ok) {
								const errorData = await response.json().catch(() => null);
								throw new Error(errorData?.message || `HTTP error! status: ${response.status}`);
							}
							
							const data = await response.json();
							
							// Hide the modal
							document.getElementById('createWebhookModal').classList.add('hidden');
							
							// Show success and reload the page
							alert('Webhook created successfully!');
							window.location.reload();
						} catch (error) {
							console.error('Error creating webhook:', error);
							alert('Failed to create webhook: ' + error.message);
						} finally {
							// Reset button state
							button.disabled = false;
							button.textContent = 'Create Webhook';
							
							// Reset form
							document.getElementById('createWebhookForm').reset();
						}
					}
					
					function confirmDeleteWebhook(webhookId, webhookName) {
						document.getElementById('deleteWebhookName').textContent = webhookName;
						document.getElementById('deleteWebhookId').value = webhookId;
						document.getElementById('deleteWebhookModal').classList.remove('hidden');
					}
					
					async function deleteWebhook(webhookId) {
						// Get CSRF token
						const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
						if (!csrfToken) {
							alert('CSRF token not found');
							return;
						}
						
						try {
							// Send delete request
							const response = await fetch(`/developers/webhooks/${webhookId}/delete`, {
								method: 'POST',
								headers: {
									'X-CSRF-Token': csrfToken
								}
							});
							
							if (!response.ok) {
								const errorData = await response.json().catch(() => null);
								throw new Error(errorData?.message || `HTTP error! status: ${response.status}`);
							}
							
							// Hide the modal and refresh the page
							document.getElementById('deleteWebhookModal').classList.add('hidden');
							alert('Webhook deleted successfully!');
							window.location.reload();
						} catch (error) {
							console.error('Error deleting webhook:', error);
							alert('Failed to delete webhook: ' + error.message);
						}
					}
				</script>
			</div>
		</div>
	}
}
