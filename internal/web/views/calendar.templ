package views

import (
	"hp/internal/web/views/component"
	"time"
)

type CalendarEvent struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	StartTime   time.Time `json:"start"`
	EndTime     time.Time `json:"end"`
	AllDay      bool      `json:"all_day"`
	Location    string    `json:"location"`
}

type CalendarDay struct {
	Date   time.Time       `json:"date"`
	Events []CalendarEvent `json:"events"`
}

type CalendarPageProps struct {
	component.AppLayoutProps
	Days []CalendarDay
}

templ CalendarPage(props CalendarPageProps) {
	@component.AppLayout(props.AppLayoutProps) {
		<div class="content-container">
			<!-- Page header -->
			<div class="page-header">
				<div class="min-w-0 flex-1">
					<h2 class="page-title">Calendar</h2>
					<p class="page-subtitle">View and manage your appointments.</p>
				</div>
				<div class="mt-4 flex md:ml-4 md:mt-0 space-x-3">
					<button type="button" class="btn-secondary w-auto">
						<i class="fas fa-download icon-with-text"></i>
						Export
					</button>
					<button type="button" class="btn-primary w-auto">
						<i class="fas fa-plus icon-with-text"></i>
						New Appointment
					</button>
				</div>
			</div>
			<!-- Calendar placeholder -->
			<div class="grid grid-cols-7 gap-2">
				for i, day := range props.Days {
					<div class="p-2 border border-gray-300 rounded-lg text-center">
						<div class="gap-2 text-sm">
							if i < 7 {
								{ day.Date.Weekday().String() } { day.Date.Day() }
							} else {
								{ day.Date.Day() }
							}
							for _, event := range day.Events {
								<div class="bg-ocean text-white p-1 rounded-md">
									{ event.Title }
								</div>
							}
						</div>
					</div>
				}
			</div>
		</div>
	}
}
