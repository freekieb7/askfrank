package views

import (
	"hp/internal/web/views/component"
	"time"
)

type AuditLogEvent struct {
	ID        string
	Title     string
	Info      string
	CreatedAt time.Time
}

type AuditLogsPageProps struct {
	component.AppLayoutProps
	Events []AuditLogEvent
}

templ AuditLogsPage(props AuditLogsPageProps) {
	@component.AppLayout(props.AppLayoutProps) {
		<div class="main-content">
			<div class="p-6">
				<div class="mb-6 flex justify-between items-center">
					<div>
						<h1 class="text-2xl font-bold text-gray-900 dark:text-white">Audit logs</h1>
						<p class="text-gray-600 dark:text-gray-400">Overview of you audit logs</p>
					</div>
					<!-- Time Range Selector -->
					<form method="GET">
						<div class="flex items-center space-x-4">
							<div class="flex items-center space-x-2">
								<input type="datetime-local" id="startTime" name="startTime" value={ time.Now().AddDate(0, -1, 0).Format("2006-01-02T15:04") } class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-ocean focus:border-ocean sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"/>
								<span class="text-gray-500 dark:text-gray-400">to</span>
								<input type="datetime-local" id="endTime" name="endTime" value={ time.Now().Format("2006-01-02T15:04") } class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-ocean focus:border-ocean sm:text-sm rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"/>
							</div>
							<button type="submit" class="inline-flex items-center rounded-lg px-3 py-2 text-sm font-medium text-white shadow-sm bg-ocean hover:bg-deep-teal">
								<i class="fas fa-filter -ml-0.5 mr-1.5 h-4 w-4"></i>
								Apply
							</button>
						</div>
					</form>
				</div>
				<!-- Webhook List -->
				<div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg overflow-hidden">
					<div class="p-4 border-b border-gray-200 dark:border-gray-700">
						<h2 class="text-lg font-medium text-gray-900 dark:text-white">Your Logs</h2>
						<p class="text-sm text-gray-500 dark:text-gray-400">See what happended</p>
					</div>
					if len(props.Events) == 0 {
						<div class="p-6 text-center">
							<p class="text-gray-500 dark:text-gray-400">You don't have any events during this period.</p>
						</div>
					} else {
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
								<thead class="bg-gray-50 dark:bg-gray-700">
									<tr>
										<th scope="col" class="w-1/4 px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Event</th>
										<th scope="col" class="w-1/2 px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Data</th>
										<th scope="col" class="w-1/4 px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">At</th>
									</tr>
								</thead>
								<tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
									for _, event := range props.Events {
										<tr class="hover:bg-gray-50 dark:hover:bg-gray-750">
											<td class="px-6 py-4 whitespace-nowrap">
												<div class="text-sm text-gray-500 dark:text-gray-400">{ event.Title }</div>
											</td>
											<td class="px-6 py-4">
												<div class="text-sm text-gray-500 dark:text-gray-400 break-words">{ event.Info }</div>
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
												{ event.CreatedAt.Format("Jan 2, 2006 15:04") }
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
			</div>
		</div>
	}
}
