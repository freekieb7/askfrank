// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/gofiber/fiber/v2"
import "hp/internal/web/views/component"

func LoginPage(c *fiber.Ctx, t Translate) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\"><div class=\"max-w-md w-full space-y-8\"><div><h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Sign in to your account</h2></div><!-- Error Message --><div id=\"errorDiv\" class=\"hidden rounded-md bg-red-50 p-4\"><div class=\"flex\"><div class=\"ml-3\"><h3 class=\"text-sm font-medium text-red-800\"><span id=\"errorText\">Error occurred</span></h3></div></div></div><!-- Success Message --><div id=\"successDiv\" class=\"hidden rounded-md bg-green-50 p-4\"><div class=\"flex\"><div class=\"ml-3\"><h3 class=\"text-sm font-medium text-green-800\"><span id=\"successText\">Success!</span></h3></div></div></div><form id=\"loginForm\" class=\"mt-8 space-y-6\"><div class=\"rounded-md shadow-sm -space-y-px\"><div><label for=\"email\" class=\"sr-only\">Email address</label> <input id=\"email\" name=\"email\" type=\"email\" autocomplete=\"email\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Email address\"></div><div><label for=\"password\" class=\"sr-only\">Password</label> <input id=\"password\" name=\"password\" type=\"password\" autocomplete=\"current-password\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Password\"></div></div><div><button type=\"submit\" class=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">Sign in</button></div></form></div></div><script>\n            document.getElementById('loginForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').content;\n                const formData = new FormData(this);\n                const errorDiv = document.getElementById('errorDiv');\n                const successDiv = document.getElementById('successDiv');\n                const errorText = document.getElementById('errorText');\n                const successText = document.getElementById('successText');\n                \n                // Hide previous messages\n                errorDiv.classList.add('hidden');\n                successDiv.classList.add('hidden');\n                \n                try {\n                    const response = await fetch('/login', {\n                        method: 'POST',\n                        headers: {\n                            'X-Csrf-Token': csrfToken,\n                        },\n                        body: formData\n                    });\n\n                    if (response.redirected) {\n                        // Successful login, redirect\n                        successText.textContent = 'Login successful! Redirecting...';\n                        successDiv.classList.remove('hidden');\n                        setTimeout(() => {\n                            window.location.href = response.url;\n                        }, 1000);\n                        return;\n                    }\n                    \n                    const result = await response.json();\n                    \n                    if (!response.ok) {\n                        // Show error message\n                        errorText.textContent = result.error || 'Login failed';\n                        errorDiv.classList.remove('hidden');\n                    } else {\n                        // Show success message\n                        successText.textContent = 'Login successful! Redirecting...';\n                        successDiv.classList.remove('hidden');\n                        setTimeout(() => {\n                            window.location.href = '/account';\n                        }, 1000);\n                    }\n                } catch (error) {\n                    console.error('Error:', error);\n                    errorText.textContent = 'An unexpected error occurred';\n                    errorDiv.classList.remove('hidden');\n                }\n            });\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = component.Layout("AskFrank - The Foundation for Data-Driven Healthcare", c).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
