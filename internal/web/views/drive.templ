package views

import "github.com/gofiber/fiber/v2"
import "hp/internal/web/views/component"
import "hp/internal/web/translate"
import "fmt"
import "strings"

type Breadcrumb struct {
	Name string
	URL  string
}

type File struct {
	ID       string
	Filename string
	Size     int64
	MimeType string
}

type Folder struct {
	ID      string
	Name    string
	Folders []Folder
	Files   []File
}

func getFileIcon(mimeType string) string {
	switch {
	case strings.HasPrefix(mimeType, "image/"):
		return "fas fa-image text-green-500"
	case strings.HasPrefix(mimeType, "video/"):
		return "fas fa-video text-red-500"
	case strings.HasPrefix(mimeType, "audio/"):
		return "fas fa-music text-purple-500"
	case mimeType == "application/pdf":
		return "fas fa-file-pdf text-red-500"
	case strings.Contains(mimeType, "word") || strings.Contains(mimeType, "document"):
		return "fas fa-file-word text-blue-500"
	case strings.Contains(mimeType, "excel") || strings.Contains(mimeType, "spreadsheet"):
		return "fas fa-file-excel text-green-500"
	case strings.Contains(mimeType, "powerpoint") || strings.Contains(mimeType, "presentation"):
		return "fas fa-file-powerpoint text-orange-500"
	case strings.HasPrefix(mimeType, "text/"):
		return "fas fa-file-alt text-gray-500"
	default:
		return "fas fa-file text-gray-500"
	}
}

func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

templ DrivePage(c *fiber.Ctx, t translate.Translate, folders []Folder, files []File, breadcrumbs []Breadcrumb, currentFolderID string) {
	@component.AppLayout("Drive - AskFrank", c, t) {
		<div class="main-content" data-current-folder-id={ currentFolderID }>
			<div class="p-6">
				<div class="mb-6">
					<h1 class="text-2xl font-bold text-gray-900 dark:text-white">My Drive</h1>
					<p class="text-gray-600 dark:text-gray-400">Manage your files and folders</p>
				</div>
				<!-- Breadcrumb Navigation -->
				if len(breadcrumbs) > 0 {
					<div class="mb-4">
						<nav class="flex" aria-label="Breadcrumb">
							<ol class="inline-flex items-center space-x-1 md:space-x-3">
								for i, breadcrumb := range breadcrumbs {
									<li class="inline-flex items-center">
										if i > 0 {
											<i class="fas fa-chevron-right text-gray-400 mx-2"></i>
										}
										if i == len(breadcrumbs)-1 {
											<span class="text-gray-500 dark:text-gray-400">{ breadcrumb.Name }</span>
										} else {
											<a href={ templ.URL(breadcrumb.URL) } class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
												{ breadcrumb.Name }
											</a>
										}
									</li>
								}
							</ol>
						</nav>
					</div>
				}
				<!-- Toolbar -->
				<div class="mb-6 flex justify-between items-center">
					<div class="flex space-x-3">
						<button id="new-folder-button" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
							<i class="fas fa-plus mr-2"></i>New Folder
						</button>
						<div class="relative">
							<input type="file" id="file-upload" multiple class="hidden" accept="*/*"/>
							<button id="upload-button" class="px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
								<i class="fas fa-upload mr-2"></i>Upload
							</button>
						</div>
					</div>
					<div class="flex space-x-3">
						<div class="relative">
							<input
								type="text"
								placeholder="Search files and folders..."
								class="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
							/>
							<i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
						</div>
						<button id="grid-view-btn" class="p-2 border border-blue-300 dark:border-blue-600 bg-blue-50 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors" title="Grid view">
							<i class="fas fa-th"></i>
						</button>
						<button id="list-view-btn" class="p-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" title="List view">
							<i class="fas fa-list"></i>
						</button>
					</div>
				</div>
				<!-- Drive Content -->
				<div class="bg-white dark:bg-gray-800 rounded-lg shadow">
					if len(folders) == 0 && len(files) == 0 {
						<div class="p-12 text-center">
							<i class="fas fa-folder-open text-6xl text-gray-300 dark:text-gray-600 mb-4"></i>
							<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No files or folders yet</h3>
							<p class="text-gray-600 dark:text-gray-400">Upload files or create folders to get started</p>
						</div>
					} else {
						<!-- Drive Content Grid -->
						<div id="drive-grid" class="p-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 2xl:grid-cols-10 gap-3">
							<!-- Folders -->
							for _, folder := range folders {
								@FolderGridItem(folder, t, c)
							}
							<!-- Files -->
							for _, file := range files {
								@FileGridItem(file, t, c)
							}
						</div>
						<!-- Drive Content List -->
						<div id="drive-list" class="hidden">
							<div class="px-6 py-3 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900">
								<div class="grid grid-cols-12 gap-4 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
									<div class="col-span-6">Name</div>
									<div class="col-span-2 hidden sm:block">Owner</div>
									<div class="col-span-2 hidden md:block">Last modified</div>
									<div class="col-span-1 hidden lg:block">Size</div>
									<div class="col-span-1"></div>
								</div>
							</div>
							<div class="divide-y divide-gray-200 dark:divide-gray-700">
								<!-- Folders -->
								for _, folder := range folders {
									@FolderListItem(folder, t, c)
								}
								<!-- Files -->
								for _, file := range files {
									@FileListItem(file, t, c)
								}
							</div>
						</div>
					}
				</div>
			</div>
		</div>
		<!-- File Upload Modal -->
		<div id="upload-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
			<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
				<div class="mt-3">
					<!-- Modal Header -->
					<div class="flex items-center justify-between mb-4">
						<h3 class="text-lg font-medium text-gray-900 dark:text-white">Upload Files</h3>
						<button id="close-upload-modal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
							<i class="fas fa-times text-xl"></i>
						</button>
					</div>
					<!-- Upload Area -->
					<div id="upload-area" class="border-2 border-dashed border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 rounded-lg p-6 text-center mb-4">
						<i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>
						<p class="text-gray-600 dark:text-gray-400 mb-2">Drag and drop files here or</p>
						<button type="button" id="select-files-btn" class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium">
							Browse Files
						</button>
					</div>
					<!-- Selected Files List -->
					<div id="selected-files" class="mb-4 hidden">
						<h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Selected Files:</h4>
						<div id="files-list" class="space-y-2 max-h-32 overflow-y-auto"></div>
					</div>
					<!-- Upload Progress -->
					<div id="upload-progress" class="mb-4 hidden">
						<div class="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-1">
							<span>Uploading...</span>
							<span id="progress-text">0%</span>
						</div>
						<div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
							<div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
						</div>
					</div>
					<!-- Modal Footer -->
					<div class="flex justify-end space-x-3">
						<button
							type="button"
							id="cancel-upload"
							class="px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
						>
							Cancel
						</button>
						<button
							type="button"
							id="start-upload"
							class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
							disabled
						>
							Upload Files
						</button>
					</div>
				</div>
			</div>
		</div>
		<!-- New Folder Modal -->
		<div id="new-folder-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
			<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
				<div class="mt-3">
					<!-- Modal Header -->
					<div class="flex items-center justify-between mb-4">
						<h3 class="text-lg font-medium text-gray-900 dark:text-white">Create New Folder</h3>
						<button id="close-modal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
							<i class="fas fa-times text-xl"></i>
						</button>
					</div>
					<!-- Modal Body -->
					<form id="create-folder-form">
						<div class="mb-4">
							<label for="folder-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
								Folder Name
							</label>
							<input
								type="text"
								id="folder-name"
								name="folder-name"
								class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
								placeholder="Enter folder name..."
								required
								maxlength="100"
							/>
						</div>
						<!-- Modal Footer -->
						<div class="flex justify-end space-x-3">
							<button
								type="button"
								id="cancel-create"
								class="px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
							>
								Cancel
							</button>
							<button
								type="submit"
								class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
							>
								Create Folder
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
		<!-- JavaScript for folder functionality -->
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				// Get current folder ID from backend-provided data attribute
				const getCurrentFolderID = function() {
					try {
						const mainContent = document.querySelector('.main-content');
						if (!mainContent) {
							return null;
						}
						
						const folderId = mainContent.dataset.currentFolderId;
						
						// Return null for empty string or undefined, otherwise return the folder ID
						return folderId && folderId.trim() !== '' ? folderId.trim() : null;
					} catch (error) {
						console.warn('Error getting current folder ID:', error);
						return null;
					}
				};

				const currentFolderID = getCurrentFolderID();

				// View switching functionality
				const gridViewBtn = document.getElementById('grid-view-btn');
				const listViewBtn = document.getElementById('list-view-btn');
				const driveGrid = document.getElementById('drive-grid');
				const driveList = document.getElementById('drive-list');

				gridViewBtn.addEventListener('click', function() {
					driveGrid.classList.remove('hidden');
					driveList.classList.add('hidden');
					gridViewBtn.classList.add('bg-blue-50', 'dark:bg-blue-900', 'border-blue-300', 'dark:border-blue-600', 'text-blue-600', 'dark:text-blue-400');
					gridViewBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
					listViewBtn.classList.remove('bg-blue-50', 'dark:bg-blue-900', 'border-blue-300', 'dark:border-blue-600', 'text-blue-600', 'dark:text-blue-400');
					listViewBtn.classList.add('bg-white', 'dark:bg-gray-800', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
				});

				listViewBtn.addEventListener('click', function() {
					driveList.classList.remove('hidden');
					driveGrid.classList.add('hidden');
					listViewBtn.classList.add('bg-blue-50', 'dark:bg-blue-900', 'border-blue-300', 'dark:border-blue-600', 'text-blue-600', 'dark:text-blue-400');
					listViewBtn.classList.remove('bg-white', 'dark:bg-gray-800', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
					gridViewBtn.classList.remove('bg-blue-50', 'dark:bg-blue-900', 'border-blue-300', 'dark:border-blue-600', 'text-blue-600', 'dark:text-blue-400');
					gridViewBtn.classList.add('bg-white', 'dark:bg-gray-800', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
				});

				// Folder double-click navigation
				document.addEventListener('dblclick', function(e) {
					const folderItem = e.target.closest('.folder-item');
					if (folderItem) {
						e.preventDefault();
						const folderId = folderItem.dataset.folderId;
						if (folderId) {
							window.location.href = `/drive/folder/${folderId}`;
						}
					}
				});

				// New folder functionality
				document.getElementById('new-folder-button').addEventListener('click', function() {
					document.getElementById('new-folder-modal').classList.remove('hidden');
				});

				// File upload functionality
				let selectedFiles = [];
				
				document.getElementById('upload-button').addEventListener('click', function() {
					document.getElementById('upload-modal').classList.remove('hidden');
				});

				document.getElementById('select-files-btn').addEventListener('click', function() {
					document.getElementById('file-upload').click();
				});

				document.getElementById('file-upload').addEventListener('change', function(e) {
					selectedFiles = Array.from(e.target.files);
					updateFilesList();
				});

				// Drag and drop functionality
				const uploadArea = document.getElementById('upload-area');
				
				uploadArea.addEventListener('dragover', function(e) {
					e.preventDefault();
					uploadArea.classList.add('bg-blue-50', 'border-blue-300');
				});

				uploadArea.addEventListener('dragleave', function(e) {
					e.preventDefault();
					uploadArea.classList.remove('bg-blue-50', 'border-blue-300');
				});

				uploadArea.addEventListener('drop', function(e) {
					e.preventDefault();
					uploadArea.classList.remove('bg-blue-50', 'border-blue-300');
					selectedFiles = Array.from(e.dataTransfer.files);
					updateFilesList();
				});

				function updateFilesList() {
					const filesList = document.getElementById('files-list');
					const selectedFilesDiv = document.getElementById('selected-files');
					const startUploadBtn = document.getElementById('start-upload');
					
					if (selectedFiles.length > 0) {
						selectedFilesDiv.classList.remove('hidden');
						startUploadBtn.disabled = false;
						
						filesList.innerHTML = '';
						selectedFiles.forEach((file, index) => {
							const fileItem = document.createElement('div');
							fileItem.className = 'flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded';
							fileItem.innerHTML = `
								<div class="flex items-center">
									<i class="fas fa-file text-gray-400 mr-2"></i>
									<span class="text-sm text-gray-700 dark:text-gray-300">${file.name}</span>
									<span class="text-xs text-gray-500 dark:text-gray-400 ml-2">(${formatFileSize(file.size)})</span>
								</div>
								<button type="button" onclick="removeFile(${index})" class="text-red-500 hover:text-red-700">
									<i class="fas fa-times"></i>
								</button>
							`;
							filesList.appendChild(fileItem);
						});
					} else {
						selectedFilesDiv.classList.add('hidden');
						startUploadBtn.disabled = true;
					}
				}

				window.removeFile = function(index) {
					selectedFiles.splice(index, 1);
					updateFilesList();
				};

				// File size formatting utility
				function formatFileSize(bytes) {
					if (bytes === 0) return '0 Bytes';
					const k = 1024;
					const sizes = ['Bytes', 'KB', 'MB', 'GB'];
					const i = Math.floor(Math.log(bytes) / Math.log(k));
					return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
				}

				// Upload modal close functionality
				document.getElementById('close-upload-modal').addEventListener('click', function() {
					closeUploadModal();
				});

				document.getElementById('cancel-upload').addEventListener('click', function() {
					closeUploadModal();
				});

				function closeUploadModal() {
					document.getElementById('upload-modal').classList.add('hidden');
					selectedFiles = [];
					document.getElementById('file-upload').value = '';
					document.getElementById('selected-files').classList.add('hidden');
					document.getElementById('upload-progress').classList.add('hidden');
					document.getElementById('start-upload').disabled = true;
				}

				// Start upload functionality
				document.getElementById('start-upload').addEventListener('click', function() {
					if (selectedFiles.length === 0) return;
					
					uploadFiles();
				});

				function uploadFiles() {
					const progressDiv = document.getElementById('upload-progress');
					const progressBar = document.getElementById('progress-bar');
					const progressText = document.getElementById('progress-text');
					
					progressDiv.classList.remove('hidden');
					
					const formData = new FormData();
					selectedFiles.forEach(file => {
						formData.append('files', file);
					});
					
					// Add current folder ID if we're in a specific folder
					if (currentFolderID) {
						formData.append('folder_id', currentFolderID);
					}
					
					fetch('/api/upload', {
						method: 'POST',
						headers: {
							'X-Csrf-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
						},
						body: formData
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Upload failed');
						}
						return response.json();
					})
					.then(data => {
						if (data.status === 'success') {
							progressBar.style.width = '100%';
							progressText.textContent = '100%';
							
							setTimeout(() => {
								closeUploadModal();
								window.location.reload();
							}, 1000);
						} else {
							throw new Error(data.error || 'Upload failed');
						}
					})
					.catch(error => {
						console.error('Error:', error);
						alert('Upload failed: ' + error.message);
						progressDiv.classList.add('hidden');
					});
				}

				// Close modal functionality
				document.getElementById('close-modal').addEventListener('click', function() {
					document.getElementById('new-folder-modal').classList.add('hidden');
					document.getElementById('folder-name').value = '';
				});

				// Cancel button functionality
				document.getElementById('cancel-create').addEventListener('click', function() {
					document.getElementById('new-folder-modal').classList.add('hidden');
					document.getElementById('folder-name').value = '';
				});

				// Close modal when clicking outside
				document.getElementById('new-folder-modal').addEventListener('click', function(e) {
					if (e.target === this) {
						this.classList.add('hidden');
						document.getElementById('folder-name').value = '';
					}
				});

				// Create folder form submission
				document.getElementById('create-folder-form').addEventListener('submit', function(e) {
					e.preventDefault();
					const folderName = document.getElementById('folder-name').value.trim();
					
					if (!folderName) {
						alert('Please enter a folder name');
						return;
					}

					// Send request to create folder
					fetch('/api/folders', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'X-Csrf-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
						},
						body: JSON.stringify({
							name: folderName,
							parent_id: currentFolderID // Use current folder as parent
						})
					})
					.then(response => response.json())
					.then(data => {
						if (data.status === 'success') {
							// Reload the page to show the new folder
							window.location.reload();
						} else {
							alert(data.error || 'Failed to create folder');
						}
					})
					.catch(error => {
						console.error('Error:', error);
						alert('Failed to create folder');
					});
				});

				// File download functionality
				document.addEventListener('click', function(e) {
					if (e.target.closest('.download-btn')) {
						e.preventDefault();
						e.stopPropagation();
						
						const downloadBtn = e.target.closest('.download-btn');
						const fileItem = downloadBtn.closest('.file-item');
						const fileId = fileItem.dataset.fileId;
						
						if (!fileId) {
							alert('File ID not found');
							return;
						}
						
						downloadFile(fileId);
					}

					// File delete functionality
					if (e.target.closest('.delete-btn')) {
						e.preventDefault();
						e.stopPropagation();
						
						const deleteBtn = e.target.closest('.delete-btn');
						const fileItem = deleteBtn.closest('.file-item');
						const fileId = fileItem.dataset.fileId;
						const fileName = fileItem.querySelector('.text-gray-900').textContent;
						
						if (!fileId) {
							alert('File ID not found');
							return;
						}
						
						// Confirm deletion
						if (confirm(`Are you sure you want to delete "${fileName}"? This action cannot be undone.`)) {
							deleteFile(fileId);
						}
					}

					// Folder delete functionality
					if (e.target.closest('.delete-folder-btn')) {
						e.preventDefault();
						e.stopPropagation();
						
						const deleteBtn = e.target.closest('.delete-folder-btn');
						const folderItem = deleteBtn.closest('.folder-item');
						const folderId = folderItem.dataset.folderId;
						const folderName = folderItem.querySelector('.font-medium').textContent;
						
						if (!folderId) {
							alert('Folder ID not found');
							return;
						}
						
						// Confirm deletion
						if (confirm(`Are you sure you want to delete folder "${folderName}" and all its contents? This action cannot be undone.`)) {
							deleteFolder(folderId);
						}
					}
				});

				function downloadFile(fileId) {
					// Create a temporary form to send POST request for download
					const form = document.createElement('form');
					form.method = 'POST';
					form.action = '/api/download';
					form.style.display = 'none';
					
					// Add CSRF token as header approach through hidden input
					const csrfToken = document.querySelector('meta[name="csrf-token"]');
					if (csrfToken) {
						// Since this is a form submission, we'll include the token as a header approach
						// by creating the request through fetch first to get the file blob
						fetch('/api/download', {
							method: 'POST',
							headers: {
								'X-Csrf-Token': csrfToken.getAttribute('content'),
								'Content-Type': 'application/x-www-form-urlencoded',
							},
							body: `file_id=${encodeURIComponent(fileId)}`
						})
						.then(response => {
							if (!response.ok) {
								throw new Error('Download failed');
							}
							// Get the filename from the Content-Disposition header
							const contentDisposition = response.headers.get('Content-Disposition');
							let filename = 'download';
							if (contentDisposition) {
								const filenameMatch = contentDisposition.match(/filename="(.+)"/);
								if (filenameMatch) {
									filename = filenameMatch[1];
								}
							}
							return response.blob().then(blob => ({ blob, filename }));
						})
						.then(({ blob, filename }) => {
							// Create a download link and trigger download
							const url = window.URL.createObjectURL(blob);
							const a = document.createElement('a');
							a.href = url;
							a.download = filename;
							document.body.appendChild(a);
							a.click();
							window.URL.revokeObjectURL(url);
							document.body.removeChild(a);
						})
						.catch(error => {
							console.error('Error:', error);
							alert('Download failed: ' + error.message);
						});
					} else {
						alert('CSRF token not found');
					}
				}

				function deleteFile(fileId) {
					const csrfToken = document.querySelector('meta[name="csrf-token"]');
					if (!csrfToken) {
						alert('CSRF token not found');
						return;
					}

					fetch('/api/delete', {
						method: 'POST',
						headers: {
							'X-Csrf-Token': csrfToken.getAttribute('content'),
							'Content-Type': 'application/x-www-form-urlencoded',
						},
						body: `file_id=${encodeURIComponent(fileId)}`
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Delete failed');
						}
						return response.json();
					})
					.then(data => {
						if (data.status === 'success') {
							// Reload the page to reflect the deletion
							window.location.reload();
						} else {
							throw new Error(data.error || 'Delete failed');
						}
					})
					.catch(error => {
						console.error('Error:', error);
						alert('Delete failed: ' + error.message);
					});
				}

				function deleteFolder(folderId) {
					const csrfToken = document.querySelector('meta[name="csrf-token"]');
					if (!csrfToken) {
						alert('CSRF token not found');
						return;
					}

					fetch('/api/delete-folder', {
						method: 'POST',
						headers: {
							'X-Csrf-Token': csrfToken.getAttribute('content'),
							'Content-Type': 'application/x-www-form-urlencoded',
						},
						body: `folder_id=${encodeURIComponent(folderId)}`
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Delete failed');
						}
						return response.json();
					})
					.then(data => {
						if (data.status === 'success') {
							// Reload the page to reflect the deletion
							window.location.reload();
						} else {
							throw new Error(data.error || 'Delete failed');
						}
					})
					.catch(error => {
						console.error('Error:', error);
						alert('Delete failed: ' + error.message);
					});
				}
			});
		</script>
	}
}

templ FolderGridItem(folder Folder, t translate.Translate, c *fiber.Ctx) {
	<div class="folder-item group cursor-pointer" data-folder-id={ folder.ID }>
		<div class="p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border-2 border-transparent hover:border-gray-200 dark:hover:border-gray-600">
			<div class="flex flex-col items-center text-center">
				<div class="relative mb-2">
					<i class="fas fa-folder text-blue-500 text-3xl"></i>
					<div class="absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-opacity">
						<button class="delete-folder-btn p-1 bg-white dark:bg-gray-800 rounded-full shadow-lg text-gray-400 hover:text-red-500 border border-gray-200 dark:border-gray-600" title="Delete folder">
							<i class="fas fa-trash text-xs"></i>
						</button>
					</div>
				</div>
				<span class="text-sm font-medium text-gray-900 dark:text-white truncate w-full px-1" title={ folder.Name }>
					{ folder.Name }
				</span>
			</div>
		</div>
	</div>
}

templ FileGridItem(file File, t translate.Translate, c *fiber.Ctx) {
	<div class="file-item group cursor-pointer" data-file-id={ file.ID }>
		<div class="p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border-2 border-transparent hover:border-gray-200 dark:hover:border-gray-600">
			<div class="flex flex-col items-center text-center">
				<div class="relative mb-2">
					<i class={ getFileIcon(file.MimeType) + " text-3xl" }></i>
					<div class="absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-opacity">
						<div class="flex space-x-1">
							<button class="download-btn p-1 bg-white dark:bg-gray-800 rounded-full shadow-lg text-gray-400 hover:text-blue-500 border border-gray-200 dark:border-gray-600" title="Download">
								<i class="fas fa-download text-xs"></i>
							</button>
							<button class="delete-btn p-1 bg-white dark:bg-gray-800 rounded-full shadow-lg text-gray-400 hover:text-red-500 border border-gray-200 dark:border-gray-600" title="Delete">
								<i class="fas fa-trash text-xs"></i>
							</button>
						</div>
					</div>
				</div>
				<span class="text-sm font-medium text-gray-900 dark:text-white truncate w-full px-1" title={ file.Filename }>
					{ file.Filename }
				</span>
				<span class="text-xs text-gray-500 dark:text-gray-400 mt-1">
					{ formatFileSize(file.Size) }
				</span>
			</div>
		</div>
	</div>
}

templ FolderListItem(folder Folder, t translate.Translate, c *fiber.Ctx) {
	<div class="folder-item group hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors cursor-pointer" data-folder-id={ folder.ID }>
		<div class="px-6 py-3 grid grid-cols-12 gap-4 items-center">
			<div class="col-span-6 sm:col-span-6 flex items-center min-w-0">
				<i class="fas fa-folder text-blue-500 mr-3 flex-shrink-0"></i>
				<span class="font-medium text-gray-900 dark:text-white truncate">{ folder.Name }</span>
			</div>
			<div class="col-span-2 text-sm text-gray-500 dark:text-gray-400 hidden sm:block">
				Me
			</div>
			<div class="col-span-2 text-sm text-gray-500 dark:text-gray-400 hidden md:block">
				—
			</div>
			<div class="col-span-1 text-sm text-gray-500 dark:text-gray-400 hidden lg:block">
				—
			</div>
			<div class="col-span-6 sm:col-span-1 flex justify-end opacity-0 group-hover:opacity-100 transition-opacity">
				<button class="delete-folder-btn p-2 text-gray-400 hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" title="Delete folder">
					<i class="fas fa-trash text-sm"></i>
				</button>
			</div>
		</div>
	</div>
}

templ FileListItem(file File, t translate.Translate, c *fiber.Ctx) {
	<div class="file-item group hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors cursor-pointer" data-file-id={ file.ID }>
		<div class="px-6 py-3 grid grid-cols-12 gap-4 items-center">
			<div class="col-span-6 sm:col-span-6 flex items-center min-w-0">
				<i class={ getFileIcon(file.MimeType) + " mr-3 flex-shrink-0" }></i>
				<span class="font-medium text-gray-900 dark:text-white truncate">{ file.Filename }</span>
			</div>
			<div class="col-span-2 text-sm text-gray-500 dark:text-gray-400 hidden sm:block">
				Me
			</div>
			<div class="col-span-2 text-sm text-gray-500 dark:text-gray-400 hidden md:block">
				—
			</div>
			<div class="col-span-1 text-sm text-gray-500 dark:text-gray-400 hidden lg:block">
				{ formatFileSize(file.Size) }
			</div>
			<div class="col-span-6 sm:col-span-1 flex justify-end space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
				<button class="download-btn p-2 text-gray-400 hover:text-blue-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" title="Download">
					<i class="fas fa-download text-sm"></i>
				</button>
				<button class="delete-btn p-2 text-gray-400 hover:text-red-500 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" title="Delete">
					<i class="fas fa-trash text-sm"></i>
				</button>
			</div>
		</div>
	</div>
}
