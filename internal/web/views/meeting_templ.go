// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "hp/internal/web/views/component"

type MeetingPageProps struct {
	component.AppLayoutProps
	MeetingID string
}

func MeetingPage(props MeetingPageProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"meeting\" class=\"h-screen flex flex-col bg-gray-900 text-white\" data-meeting-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(props.MeetingID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/views/meeting.templ`, Line: 12, Col: 107}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><!-- Header with \t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\ttype: 'ice-candidate',\n\t\t\t\t\t\tto: participantId,\n\t\t\t\t\t\tfrom: userId,\n\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\troomID: meetingId,\n\t\t\t\t\t\tpayload: JSON.stringify(event.candidate)\n\t\t\t\t\t})); info and\t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\ttype: 'offer',\n\t\t\t\t\t\tto: participantId,\n\t\t\t\t\t\tfrom: userId,\n\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\troomID: meetingId,\n\t\t\t\t\t\tpayload: JSON.stringify(offer)\n\t\t\t\t\t}));ipants --><div class=\"bg-gray-800 p-4 flex justify-between items-center border-b border-gray-700\"><div class=\"flex items-center\"><h1 class=\"text-xl font-bold\">Meeting: ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(props.MeetingID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/views/meeting.templ`, Line: 30, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</h1><span id=\"connectionStatus\" class=\"ml-3 px-2 py-1 rounded text-sm bg-yellow-600\">Connecting...</span></div><div class=\"flex items-center space-x-4\"><div class=\"flex items-center\"><span class=\"text-sm text-gray-300 mr-2\">Participants:</span> <span id=\"participantCount\" class=\"bg-blue-600 px-2 py-1 rounded text-sm\">0</span></div><button id=\"copyLinkBtn\" class=\"bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded text-sm\">Share Link</button></div></div><!-- Main content area with video grid and participant list --><div class=\"flex-1 flex\"><!-- Video grid --><div class=\"flex-1 p-4\"><div id=\"videoGrid\" class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 h-full\"><!-- Local video --><div class=\"relative bg-gray-800 rounded-lg overflow-hidden\"><video id=\"localVideo\" autoplay playsinline muted class=\"w-full h-full object-cover\"></video><div class=\"absolute bottom-2 left-2 bg-black bg-opacity-50 px-2 py-1 rounded text-sm\">You (Local)</div></div><!-- Remote videos will be added here dynamically --></div></div><!-- Participant sidebar --><div class=\"w-80 bg-gray-800 border-l border-gray-700 flex flex-col\"><div class=\"p-4 border-b border-gray-700\"><h3 class=\"font-semibold text-lg\">Participants</h3></div><div class=\"flex-1 overflow-y-auto\"><div id=\"participantList\" class=\"p-4 space-y-2\"><!-- Participant items will be added here --></div></div></div></div><!-- Controls --><div class=\"bg-gray-800 p-4 flex justify-center space-x-4 border-t border-gray-700\"><button id=\"toggleMicBtn\" class=\"bg-gray-700 hover:bg-gray-600 w-12 h-12 rounded-full flex items-center justify-center\"><i class=\"fas fa-microphone text-white\"></i></button> <button id=\"toggleVideoBtn\" class=\"bg-gray-700 hover:bg-gray-600 w-12 h-12 rounded-full flex items-center justify-center\"><i class=\"fas fa-video text-white\"></i></button> <button id=\"leaveBtn\" class=\"bg-red-600 hover:bg-red-700 w-12 h-12 rounded-full flex items-center justify-center\"><i class=\"fas fa-phone-slash text-white\"></i></button></div></div><script>\n\t\t\tconst meetingId = document.getElementById('meeting').dataset.meetingId;\n\t\t\tconst ws = new WebSocket(`wss://dentately-famous-daleyza.ngrok-free.dev/ws/rtc`);\n\t\t\t\n\t\t\t// Generate a unique user ID for this session\n\t\t\tconst userId = 'user_' + Math.random().toString(36).substr(2, 9);\n\t\t\t\n\t\t\t// WebRTC configuration\n\t\t\tconst rtcConfig = {\n\t\t\t\ticeServers: [\n\t\t\t\t\t{ urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'] }\n\t\t\t\t],\n\t\t\t\ticeCandidatePoolSize: 10,\n\t\t\t};\n\n\t\t\t// State management\n\t\t\tconst peerConnections = new Map(); // Map of userId -> RTCPeerConnection\n\t\t\tconst remoteStreams = new Map(); // Map of userId -> MediaStream\n\t\t\tlet localStream = null;\n\t\t\tlet isAudioMuted = false;\n\t\t\tlet isVideoOff = false;\n\t\t\t\n\t\t\t// DOM elements\n\t\t\tconst localVideo = document.getElementById('localVideo');\n\t\t\tconst videoGrid = document.getElementById('videoGrid');\n\t\t\tconst participantList = document.getElementById('participantList');\n\t\t\tconst participantCount = document.getElementById('participantCount');\n\t\t\tconst connectionStatus = document.getElementById('connectionStatus');\n\t\t\tconst toggleMicBtn = document.getElementById('toggleMicBtn');\n\t\t\tconst toggleVideoBtn = document.getElementById('toggleVideoBtn');\n\t\t\tconst leaveBtn = document.getElementById('leaveBtn');\n\t\t\tconst copyLinkBtn = document.getElementById('copyLinkBtn');\n\n\t\t\t// Initialize media and WebSocket\n\t\t\tasync function initialize() {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('Initializing media devices...');\n\t\t\t\t\t// Get local media\n\t\t\t\t\tlocalStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n\t\t\t\t\tlocalVideo.srcObject = localStream;\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('Local media initialized:', localStream.getTracks().map(t => `${t.kind}:${t.enabled}`));\n\t\t\t\t\t\n\t\t\t\t// If WebSocket is already connected, join the room now\n\t\t\t\tif (ws.readyState === WebSocket.OPEN) {\n\t\t\t\t\tconsole.log('WebSocket ready, joining room now');\n\t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\ttype: 'join',\n\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\troomID: meetingId, // Also send with capital ID for server compatibility\n\t\t\t\t\t\tfrom: userId\n\t\t\t\t\t}));\n\t\t\t\t}\t\t\t\t\tupdateConnectionStatus('connected', 'Media Ready');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error accessing media devices:', error);\n\t\t\t\t\tupdateConnectionStatus('error', 'Media Error');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// WebSocket event handlers\n\t\t\tws.onopen = async () => {\n\t\t\t\tconsole.log('WebSocket connected');\n\t\t\t\tupdateConnectionStatus('connected', 'Connected');\n\t\t\t\t\n\t\t\t\t// Wait for media to be ready before joining\n\t\t\t\tif (localStream) {\n\t\t\t\t\tconsole.log('Local stream ready, joining room');\n\t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\ttype: 'join',\n\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\troomID: meetingId, // Also send with capital ID for server compatibility\n\t\t\t\t\t\tfrom: userId\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Waiting for local stream before joining room');\n\t\t\t\t\t// Will join after media is initialized\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tws.onmessage = async (event) => {\n\t\t\t\tconst message = JSON.parse(event.data);\n\t\t\t\tconsole.log('Received message:', message);\n\n\t\t\t\tswitch (message.type) {\n\t\t\t\t\tcase 'room-info':\n\t\t\t\t\t\thandleRoomInfo(message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user-joined':\n\t\t\t\t\t\thandleUserJoined(message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user-left':\n\t\t\t\t\t\thandleUserLeft(message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'offer':\n\t\t\t\t\t\thandleOffer(message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'answer':\n\t\t\t\t\t\thandleAnswer(message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ice-candidate':\n\t\t\t\t\t\thandleIceCandidate(message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tws.onclose = () => {\n\t\t\t\tupdateConnectionStatus('disconnected', 'Disconnected');\n\t\t\t};\n\n\t\t\tws.onerror = (error) => {\n\t\t\t\tconsole.error('WebSocket error:', error);\n\t\t\t\tupdateConnectionStatus('error', 'Connection Error');\n\t\t\t};\n\n\t\t\t// Room management functions\n\t\t\tfunction handleRoomInfo(message) {\n\t\t\t\tlet existingParticipants = [];\n\t\t\t\tif (message.payload) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\texistingParticipants = typeof message.payload === 'string' ? JSON.parse(message.payload) : message.payload;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Error parsing room info payload:', e);\n\t\t\t\t\t\texistingParticipants = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log('Room info received, existing participants:', existingParticipants);\n\t\t\t\t\n\t\t\t\t// Create peer connections for existing participants\n\t\t\t\texistingParticipants.forEach(participantId => {\n\t\t\t\t\tconsole.log('Creating peer connection for existing participant:', participantId);\n\t\t\t\t\taddParticipant(participantId);\n\t\t\t\t\tcreatePeerConnection(participantId, true); // As initiator\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tupdateParticipantCount();\n\t\t\t}\n\n\t\t\tfunction handleUserJoined(message) {\n\t\t\t\tconsole.log('User joined:', message.from);\n\t\t\t\taddParticipant(message.from);\n\t\t\t\tcreatePeerConnection(message.from, false); // As receiver\n\t\t\t\tupdateParticipantCount();\n\t\t\t}\n\n\t\t\tfunction handleUserLeft(message) {\n\t\t\t\tconsole.log('User left:', message.from);\n\t\t\t\tremoveParticipant(message.from);\n\t\t\t\t\n\t\t\t\t// Clean up peer connection\n\t\t\t\tif (peerConnections.has(message.from)) {\n\t\t\t\t\tpeerConnections.get(message.from).close();\n\t\t\t\t\tpeerConnections.delete(message.from);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tupdateParticipantCount();\n\t\t\t}\n\n\t\t\t// Participant UI management\n\t\t\tfunction addParticipant(participantId) {\n\t\t\t\t// Add to participant list\n\t\t\t\tconst participantItem = document.createElement('div');\n\t\t\t\tparticipantItem.id = `participant-${participantId}`;\n\t\t\t\tparticipantItem.className = 'flex items-center space-x-3 p-2 bg-gray-700 rounded';\n\t\t\t\tparticipantItem.innerHTML = `\n\t\t\t\t\t<div class=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-sm font-semibold\">\n\t\t\t\t\t\t${participantId.substr(0, 2).toUpperCase()}\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"flex-1 text-sm\">${participantId}</span>\n\t\t\t\t\t<div class=\"flex space-x-1\">\n\t\t\t\t\t\t<div class=\"w-2 h-2 bg-green-500 rounded-full\" title=\"Audio on\"></div>\n\t\t\t\t\t\t<div class=\"w-2 h-2 bg-green-500 rounded-full\" title=\"Video on\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\tparticipantList.appendChild(participantItem);\n\n\t\t\t\t// Add video element for remote stream\n\t\t\t\tconst videoContainer = document.createElement('div');\n\t\t\t\tvideoContainer.id = `video-${participantId}`;\n\t\t\t\tvideoContainer.className = 'relative bg-gray-800 rounded-lg overflow-hidden';\n\t\t\t\tvideoContainer.innerHTML = `\n\t\t\t\t\t<video autoplay playsinline class=\"w-full h-full object-cover\"></video>\n\t\t\t\t\t<div class=\"absolute bottom-2 left-2 bg-black bg-opacity-50 px-2 py-1 rounded text-sm\">\n\t\t\t\t\t\t${participantId}\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\tvideoGrid.appendChild(videoContainer);\n\t\t\t}\n\n\t\t\tfunction removeParticipant(participantId) {\n\t\t\t\t// Remove from participant list\n\t\t\t\tconst participantItem = document.getElementById(`participant-${participantId}`);\n\t\t\t\tif (participantItem) {\n\t\t\t\t\tparticipantItem.remove();\n\t\t\t\t}\n\n\t\t\t\t// Remove video element\n\t\t\t\tconst videoContainer = document.getElementById(`video-${participantId}`);\n\t\t\t\tif (videoContainer) {\n\t\t\t\t\tvideoContainer.remove();\n\t\t\t\t}\n\n\t\t\t\t// Clean up remote stream\n\t\t\t\tif (remoteStreams.has(participantId)) {\n\t\t\t\t\tremoteStreams.delete(participantId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction updateParticipantCount() {\n\t\t\t\tconst count = participantList.children.length + 1; // +1 for local user\n\t\t\t\tparticipantCount.textContent = count;\n\t\t\t}\n\n\t\t\tfunction updateConnectionStatus(status, text) {\n\t\t\t\tconnectionStatus.textContent = text;\n\t\t\t\tconnectionStatus.className = connectionStatus.className.replace(/bg-\\w+-\\d+/, '');\n\t\t\t\t\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase 'connected':\n\t\t\t\t\t\tconnectionStatus.classList.add('bg-green-600');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'connecting':\n\t\t\t\t\t\tconnectionStatus.classList.add('bg-yellow-600');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'disconnected':\n\t\t\t\t\t\tconnectionStatus.classList.add('bg-gray-600');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tconnectionStatus.classList.add('bg-red-600');\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// WebRTC functions\n\t\t\tasync function createPeerConnection(participantId, isInitiator) {\n\t\t\t\tconsole.log(`Creating peer connection for ${participantId}, isInitiator: ${isInitiator}`);\n\t\t\t\tconst pc = new RTCPeerConnection(rtcConfig);\n\t\t\t\tpeerConnections.set(participantId, pc);\n\n\t\t\t\t// Add connection state monitoring\n\t\t\t\tpc.onconnectionstatechange = () => {\n\t\t\t\t\tconsole.log(`Peer connection state for ${participantId}:`, pc.connectionState);\n\t\t\t\t};\n\n\t\t\t\tpc.oniceconnectionstatechange = () => {\n\t\t\t\t\tconsole.log(`ICE connection state for ${participantId}:`, pc.iceConnectionState);\n\t\t\t\t};\n\n\t\t\t\tpc.onicegatheringstatechange = () => {\n\t\t\t\t\tconsole.log(`ICE gathering state for ${participantId}:`, pc.iceGatheringState);\n\t\t\t\t};\n\n\t\t\t\t// Add local stream tracks to peer connection\n\t\t\t\tif (localStream) {\n\t\t\t\t\tconsole.log(`Adding ${localStream.getTracks().length} local tracks to peer connection for ${participantId}`);\n\t\t\t\t\tlocalStream.getTracks().forEach(track => {\n\t\t\t\t\t\tconsole.log(`Adding track: ${track.kind} (enabled: ${track.enabled})`);\n\t\t\t\t\t\tpc.addTrack(track, localStream);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('No local stream available when creating peer connection for', participantId);\n\t\t\t\t}\n\n\t\t\t\t// Handle incoming tracks\n\t\t\t\tpc.ontrack = (event) => {\n\t\t\t\t\tconsole.log('Received remote track from:', participantId, 'Track kind:', event.track.kind);\n\t\t\t\t\tconst remoteStream = event.streams[0];\n\t\t\t\t\tremoteStreams.set(participantId, remoteStream);\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('Remote stream tracks:', remoteStream.getTracks().map(t => `${t.kind}:${t.enabled}`));\n\t\t\t\t\t\n\t\t\t\t\tconst videoContainer = document.getElementById(`video-${participantId}`);\n\t\t\t\t\tif (videoContainer) {\n\t\t\t\t\t\tconst video = videoContainer.querySelector('video');\n\t\t\t\t\t\tvideo.srcObject = remoteStream;\n\t\t\t\t\t\tconsole.log('Set remote stream to video element for', participantId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Add event listeners to monitor video playback\n\t\t\t\t\t\tvideo.onloadedmetadata = () => console.log('Video metadata loaded for', participantId);\n\t\t\t\t\t\tvideo.onplay = () => console.log('Video started playing for', participantId);\n\t\t\t\t\t\tvideo.onerror = (e) => console.error('Video error for', participantId, e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('Video container not found for participant:', participantId);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Handle ICE candidates\n\t\t\t\tpc.onicecandidate = (event) => {\n\t\t\t\t\tif (event.candidate) {\n\t\t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\t\ttype: 'ice-candidate',\n\t\t\t\t\t\t\tto: participantId,\n\t\t\t\t\t\t\tfrom: userId,\n\t\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\t\tpayload: JSON.stringify(event.candidate)\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// If initiator, create and send offer\n\t\t\t\tif (isInitiator) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst offer = await pc.createOffer();\n\t\t\t\t\t\tawait pc.setLocalDescription(offer);\n\t\t\t\t\t\t\n\t\t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\t\ttype: 'offer',\n\t\t\t\t\t\t\tto: participantId,\n\t\t\t\t\t\t\tfrom: userId,\n\t\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\t\tpayload: JSON.stringify(offer)\n\t\t\t\t\t\t}));\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error creating offer:', error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function handleOffer(message) {\n\t\t\t\tconst pc = peerConnections.get(message.from);\n\t\t\t\tif (!pc) return;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst offer = JSON.parse(message.payload);\n\t\t\t\t\tawait pc.setRemoteDescription(offer);\n\t\t\t\t\t\n\t\t\t\t\tconst answer = await pc.createAnswer();\n\t\t\t\t\tawait pc.setLocalDescription(answer);\n\t\t\t\t\t\n\t\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\t\ttype: 'answer',\n\t\t\t\t\t\tto: message.from,\n\t\t\t\t\t\tfrom: userId,\n\t\t\t\t\t\troomId: meetingId,\n\t\t\t\t\t\troomID: meetingId,\n\t\t\t\t\t\tpayload: JSON.stringify(answer)\n\t\t\t\t\t}));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error handling offer:', error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function handleAnswer(message) {\n\t\t\t\tconst pc = peerConnections.get(message.from);\n\t\t\t\tif (!pc) return;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst answer = JSON.parse(message.payload);\n\t\t\t\t\tawait pc.setRemoteDescription(answer);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error handling answer:', error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function handleIceCandidate(message) {\n\t\t\t\tconst pc = peerConnections.get(message.from);\n\t\t\t\tif (!pc) return;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst candidate = JSON.parse(message.payload);\n\t\t\t\t\tawait pc.addIceCandidate(candidate);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error adding ICE candidate:', error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Control button handlers\n\t\t\ttoggleMicBtn.addEventListener('click', () => {\n\t\t\t\tif (localStream) {\n\t\t\t\t\tconst audioTrack = localStream.getAudioTracks()[0];\n\t\t\t\t\tif (audioTrack) {\n\t\t\t\t\t\taudioTrack.enabled = !audioTrack.enabled;\n\t\t\t\t\t\tisAudioMuted = !audioTrack.enabled;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttoggleMicBtn.innerHTML = isAudioMuted ? \n\t\t\t\t\t\t\t'<i class=\"fas fa-microphone-slash text-red-500\"></i>' :\n\t\t\t\t\t\t\t'<i class=\"fas fa-microphone text-white\"></i>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttoggleVideoBtn.addEventListener('click', () => {\n\t\t\t\tif (localStream) {\n\t\t\t\t\tconst videoTrack = localStream.getVideoTracks()[0];\n\t\t\t\t\tif (videoTrack) {\n\t\t\t\t\t\tvideoTrack.enabled = !videoTrack.enabled;\n\t\t\t\t\t\tisVideoOff = !videoTrack.enabled;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttoggleVideoBtn.innerHTML = isVideoOff ? \n\t\t\t\t\t\t\t'<i class=\"fas fa-video-slash text-red-500\"></i>' :\n\t\t\t\t\t\t\t'<i class=\"fas fa-video text-white\"></i>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tleaveBtn.addEventListener('click', () => {\n\t\t\t\t// Send leave message\n\t\t\t\tws.send(JSON.stringify({\n\t\t\t\t\ttype: 'leave',\n\t\t\t\t\troomId: meetingId,\n\t\t\t\t\troomID: meetingId,\n\t\t\t\t\tfrom: userId\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\t// Clean up and redirect\n\t\t\t\tif (localStream) {\n\t\t\t\t\tlocalStream.getTracks().forEach(track => track.stop());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpeerConnections.forEach(pc => pc.close());\n\t\t\t\tws.close();\n\t\t\t\t\n\t\t\t\twindow.location.href = '/';\n\t\t\t});\n\n\t\t\tcopyLinkBtn.addEventListener('click', () => {\n\t\t\t\tconst meetingUrl = window.location.href;\n\t\t\t\tnavigator.clipboard.writeText(meetingUrl).then(() => {\n\t\t\t\t\tconst originalText = copyLinkBtn.textContent;\n\t\t\t\t\tcopyLinkBtn.textContent = 'Copied!';\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tcopyLinkBtn.textContent = originalText;\n\t\t\t\t\t}, 2000);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Initialize the application\n\t\t\tinitialize();\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = component.AppLayout(props.AppLayoutProps).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
