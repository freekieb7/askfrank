package views

import "hp/internal/web/views/component"
import "hp/internal/organisation"

type BillingPageProps struct {
	component.AppLayoutProps
	SubscriptionPlan organisation.SubscriptionPlan
	SuccessMsg       string
	ErrorMsg         string
}

templ BillingPage(props BillingPageProps) {
	@component.AppLayout(props.AppLayoutProps) {
		<div class="py-6">
			<div class="content-container">
				<!-- Header -->
				<div class="text-center mb-8">
					<h1 class="page-title">Choose Your Plan</h1>
					<p class="page-subtitle max-w-xl mx-auto">
						Select the perfect subscription tier for your healthcare practice.
					</p>
				</div>
				<!-- Error message display -->
				<div id="error-message" class={ "alert-error mb-6 " + hidden(props.ErrorMsg == "") }>
					<div class="flex">
						<div class="shrink-0">
							<svg class="icon-lg text-red-400 dark:text-red-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
							</svg>
						</div>
						<div class="ml-3">
							<h3 class="text-sm font-medium text-red-800 dark:text-red-200" id="error-text">
								<!-- Error message will be inserted here -->
								{ props.ErrorMsg }
							</h3>
						</div>
					</div>
				</div>
				<!-- Success message display -->
				<div id="success-message" class={ "alert-success mb-6 " + hidden(props.SuccessMsg == "") }>
					<div class="flex">
						<div class="shrink-0">
							<svg class="icon-lg text-green-400 dark:text-green-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
							</svg>
						</div>
						<div class="ml-3">
							<h3 class="text-sm font-medium text-green-800 dark:text-green-200" id="success-text">
								<!-- Success message will be inserted here -->
								{ props.SuccessMsg }
							</h3>
						</div>
					</div>
				</div>
				<!-- Pricing Cards -->
				<div class="grid-compact grid-cols-1 md:grid-cols-3 mb-8">
					<!-- Free Tier -->
					<div class="card relative">
						<div class="text-center">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">Free</h3>
							<div class="mb-3">
								<span class="text-3xl font-bold text-gray-900 dark:text-gray-100">$0</span>
								<span class="text-gray-500 dark:text-gray-400">/month</span>
							</div>
							<p class="text-gray-600 dark:text-gray-400 text-sm mb-4">Perfect for getting started</p>
						</div>
						<ul class="space-y-2 mb-6">
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Up to 50 patients</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Basic scheduling</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Simple records</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Email support</span>
							</li>
							<li class="flex items-center text-sm text-gray-400 dark:text-gray-500">
								<i class="fas fa-times w-4 h-4 mr-2"></i>
								<span>Advanced analytics</span>
							</li>
						</ul>
						<form id="upgrade-free-form">
							<input type="hidden" name="plan" value="free"/>
							<button id="upgrade-free-button" type="submit" class="btn-secondary w-full bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">
								if props.SubscriptionPlan == organisation.SubscriptionPlanFree {
									Current Plan
								} else {
									Downgrade to Free
								}
							</button>
						</form>
					</div>
					<!-- Pro Tier -->
					<div class="card-highlighted relative transform scale-105">
						<div class="absolute -top-2 left-1/2 transform -translate-x-1/2">
							<span class="badge-primary">Most Popular</span>
						</div>
						<div class="text-center">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">Pro</h3>
							<div class="mb-3">
								<span class="text-3xl font-bold text-primary-600">$29</span>
								<span class="text-gray-500 dark:text-gray-400">/month</span>
							</div>
							<p class="text-gray-600 dark:text-gray-400 text-sm mb-4">Ideal for growing practices</p>
						</div>
						<ul class="space-y-2 mb-6">
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Up to 500 patients</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Advanced scheduling</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Complete records</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Priority support</span>
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-medical-600 w-4 h-4 mr-2"></i>
								<span class="text-gray-700 dark:text-gray-300">Advanced analytics</span>
							</li>
						</ul>
						<form id="upgrade-pro-form">
							<input type="hidden" name="plan" value="pro"/>
							<button id="upgrade-pro-button" type="submit" class="btn-secondary w-full">
								if props.SubscriptionPlan == organisation.SubscriptionPlanPro {
									Current Plan
								} else {
									Upgrade to Pro
								}
							</button>
						</form>
					</div>
				</div>
				<!-- Payment Information Section -->
				<div class="card mb-6">
					<h2 class="card-title">Payment Information</h2>
					<div class="grid-compact grid-cols-1 lg:grid-cols-2">
						<!-- Current Subscription -->
						<div>
							<h3 class="text-base font-medium text-gray-900 dark:text-gray-100 mb-3">Current Subscription</h3>
							<div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-3">
								<div class="flex items-center justify-between mb-1">
									<span class="font-medium text-gray-900 dark:text-gray-100 text-sm">Free Plan</span>
									<span class="badge-success">Active</span>
								</div>
								<div class="text-xs text-gray-600 dark:text-gray-400">
									<p>Started: January 15, 2025</p>
									<p>Next billing: No upcoming charges</p>
								</div>
							</div>
						</div>
						<!-- Payment Method -->
						<div>
							<h3 class="text-base font-medium text-gray-900 dark:text-gray-100 mb-3">Payment Method</h3>
							<div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-3">
								<div class="flex items-center justify-between mb-1">
									<div class="flex items-center">
										<i class="fas fa-credit-card text-gray-400 mr-2"></i>
										<span class="text-gray-600 dark:text-gray-400 text-sm">No payment method on file</span>
									</div>
								</div>
								<button class="link-primary text-xs font-medium">
									Add Payment Method
								</button>
							</div>
						</div>
					</div>
				</div>
				<!-- Billing History -->
				<div class="card">
					<h2 class="card-title">Billing History</h2>
					<div class="text-center py-6">
						<i class="fas fa-receipt text-gray-300 dark:text-gray-600 text-3xl mb-3"></i>
						<p class="text-gray-500 dark:text-gray-400 text-sm mb-1">No billing history available</p>
						<p class="text-xs text-gray-400 dark:text-gray-500">Your invoices and payment history will appear here</p>
					</div>
				</div>
			</div>
		</div>
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const upgradeFreeForm = document.getElementById('upgrade-free-form');
				const upgradeFreeButton = document.getElementById('upgrade-free-button');
				const upgradeProForm = document.getElementById('upgrade-pro-form');
				const upgradeProButton = document.getElementById('upgrade-pro-button');

				const errorDiv = document.getElementById('error-message');
				const successDiv = document.getElementById('success-message');
				const errorText = document.getElementById('error-text');
				const successText = document.getElementById('success-text');

				upgradeProForm.addEventListener('submit', async function(event) {
					event.preventDefault();

					const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
					const formData = new FormData(this);

					let body = {
						"new_plan": formData.get('plan')
					}

					try {
						const response = await fetch('/billing/change_subscription', {
							method: 'POST',
							headers: {
								'X-CSRF-Token': csrfToken,
								'Content-Type': 'application/json'
							},
							body: JSON.stringify(body)
						});

						if (!response.ok) {
							throw new Error('Failed to create billing portal session');
						}

						const json = await response.json();

						const redirectTo = json.data.redirect_to;
						const message = json.message;
						if (!redirectTo) {
							throw new Error('No redirect URL provided');
						}
						if (!message) {
							throw new Error('No message provided');
						}

						successDiv.classList.remove('hidden');
						successText.textContent = message;
						setTimeout(() => {
							window.location.href = redirectTo;
						}, 100);
					} catch (error) {
						errorDiv.classList.remove('hidden');
						errorText.textContent = 'Failed to create billing portal session. Please try again.';
						console.error('Error creating portal session:', error);
					} finally {
						upgradeProButton.disabled = false; // Re-enable submit button
					}
				});
			});
		</script>
	}
}

func hidden(y bool) string {
	if y {
		return "hidden"
	}
	return ""
}
