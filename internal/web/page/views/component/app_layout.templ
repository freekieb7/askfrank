package component

type MenuItem struct {
	Name     string
	Icon     string
	URL      string
	SubItems []MenuItem
	Active   bool
}

type UserInfo struct {
	ID    string
	Name  string
	Email string
}

type Notification struct {
	ID        string
	Title     string
	Message   string
	Type      string // "info", "success", "warning", "error", "critical"
	IsRead    bool
	CreatedAt string
	ActionURL string
}

type AppLayoutProps struct {
	LayoutProps           LayoutProps
	MenuItems             []MenuItem
	HasUnreadNotification bool
	UnreadCount           int
	RecentNotifications   []Notification
	UserInfo              UserInfo
}

templ AppLayout(props AppLayoutProps) {
	@Layout(props.LayoutProps) {
		<div class="flex h-screen">
			<!-- Sidebar -->
			<div class="hidden lg:flex lg:w-56 lg:flex-col lg:fixed lg:inset-y-0">
				<div class="flex flex-col grow pt-4 bg-white border-r border-gray-200 overflow-y-auto">
					<!-- Logo -->
					<div class="flex items-center shrink-0 px-3 pb-4">
						<div class="flex items-center">
							<i class="fas fa-heartbeat text-2xl mr-2 text-medical-500"></i>
							<div>
								<h1 class="text-lg font-bold text-medical-500">AskFrank</h1>
								<p class="text-xs text-gray-500">Healthcare</p>
							</div>
						</div>
					</div>
					<!-- Navigation -->
					<nav class="space-y-4">
						for _, item := range props.MenuItems {
							if item.SubItems != nil && len(item.SubItems) > 0 {
								<details class="group" { openClassName(item.Active) }>
									<summary class="p-2 flex items-center hover:bg-gray-100 cursor-pointer">
										<div class="flex items-center">
											<i class={ item.Icon + " w-4 h-4 mr-2.5" }></i>
											<span>{ item.Name }</span>
										</div>
										<i class="fas fa-chevron-down ml-2 group-open:rotate-180"></i>
									</summary>
									<nav class="mt-1 space-y-1">
										for _, subItem := range item.SubItems {
											<a href={ subItem.URL }>
												<div class="p-2 flex items-center hover:bg-gray-100">
													<i class={ subItem.Icon + " w-4 h-4 mr-2.5" }></i>
													<span>{ subItem.Name }</span>
												</div>
											</a>
										}
									</nav>
								</details>
							} else {
								<a href={ item.URL }>
									<div class="p-2 flex items-center hover:bg-gray-100">
										<i class={ item.Icon + " w-4 h-4 mr-2.5" }></i>
										<span>{ item.Name }</span>
									</div>
								</a>
							}
						}
					</nav>
				</div>
			</div>
			<!-- Main content -->
			<div class="flex flex-col flex-1 lg:pl-56">
				<!-- Top bar -->
				<div class="sticky top-0 z-40 flex h-14 shrink-0 items-center gap-x-3 border-b border-gray-200 bg-white px-3 shadow-sm sm:gap-x-4 sm:px-4">
					<!-- Spacer -->
					<div class="flex-1"></div>
					<!-- Right side items -->
					<div class="flex items-center gap-x-2">
						<!-- Profile dropdown -->
						<div class="relative">
							<button type="button" class="rounded-lg p-2 hover:bg-gray-100" id="profile-menu-button">
								<img class="h-7 w-7 rounded-full bg-gray-50" src="https://ui-avatars.com/api/?name=Dr+Smith&background=05668D&color=fff" alt="Profile"/>
							</button>
							<!-- Dropdown menu -->
							<div class="dropdown absolute right-0 z-10 mt-2 w-44 origin-top-right rounded-lg bg-white py-1.5 shadow-lg ring-1 ring-gray-900/5 hidden" id="profile-dropdown">
								// <a href="/profile" class="block px-3 py-2 text-sm leading-6 text-gray-900 hover:bg-gray-50 rounded-md mx-1">
								// 	<i class="fas fa-user w-4 h-4 mr-2 text-gray-400"></i>
								// 	Profile
								// </a>
								// <a href="/settings" class="block px-3 py-2 text-sm leading-6 text-gray-900 hover:bg-gray-50 rounded-md mx-1">
								// 	<i class="fas fa-cog w-4 h-4 mr-2 text-gray-400"></i>
								// 	Settings
								// </a>
								<div class="border-t border-gray-100 my-1">
									<button type="button" id="logout-button" class="block w-full text-left px-3 py-2 text-sm leading-6 text-gray-900 hover:bg-gray-50 rounded-md mx-1">
										<i class="fas fa-sign-out-alt w-4 h-4 mr-2 text-gray-400"></i>
										Sign out
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
				<!-- Page content -->
				<main class="flex-1 overflow-y-auto">
					{ children... }
				</main>
			</div>
		</div>
		<script>
			// Initialize theme toggle appearance when DOM is loaded
			document.addEventListener('DOMContentLoaded', function() {
				const logoutButton = document.getElementById('logout-button');
				const profileButton = document.getElementById('profile-menu-button');
				const profileDropdown = document.getElementById('profile-dropdown');

				// nav dropdown funcionality


				// Logout functionality
				logoutButton.addEventListener('click', async function() {
					const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content')

					try {
						const response = await fetch('/logout', {
							method: 'POST',
							headers: {
								'X-CSRF-Token': csrfToken
							}
						});

						if (!response.ok) {
							throw new Error('Logout request failed');
						}

						const json = await response.json();
						if (!json.data.redirect_to) {
							throw new Error('No redirect URL provided');
						}

						window.location.href = json.data.redirect_to;
					} catch (error) {
						console.error('Error during logout:', error);
						alert('An error occurred during logout. Please try again.');
					}
				});

				// Profile dropdown functionality
				profileButton.addEventListener('click', function(e) {
					e.stopPropagation();
					profileDropdown.classList.toggle('hidden');
					if (!profileDropdown.classList.contains('hidden')) {
						setTimeout(() => profileDropdown.classList.add('show'), 10);
					} else {
						profileDropdown.classList.remove('show');
					}
				});

				// Close dropdown when clicking outside
				document.addEventListener('click', function() {
					profileDropdown.classList.add('hidden');
					profileDropdown.classList.remove('show');
				});
			});
		</script>
	}
}

func openClassName(open bool) string {
	if open {
		return "open"
	}
	return ""
}

func getNotificationIcon(notificationType string) string {
	switch notificationType {
	case "info":
		return "fas fa-info-circle"
	case "success":
		return "fas fa-check-circle"
	case "warning":
		return "fas fa-exclamation-triangle"
	case "error":
		return "fas fa-times-circle"
	default:
		return "fas fa-bell"
	}
}

func getNotificationIconClass(notificationType string) string {
	switch notificationType {
	case "info":
		return " bg-blue-100 dark:bg-blue-800 text-blue-600 dark:text-blue-300"
	case "success":
		return " bg-green-100 dark:bg-green-800 text-green-600 dark:text-green-300"
	case "warning":
		return " bg-yellow-100 dark:bg-yellow-800 text-yellow-600 dark:text-yellow-300"
	case "error":
		return " bg-red-100 dark:bg-red-800 text-red-600 dark:text-red-300"
	default:
		return " bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300"
	}
}
