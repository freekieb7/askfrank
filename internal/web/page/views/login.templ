package views

import "hp/internal/web/page/views/component"

type LoginPageProps struct {
	component.LayoutProps
}

templ LoginPage(props LoginPageProps) {
	@component.Layout(props.LayoutProps) {
		<div>
			<h1>Sign In</h1>
			<form id="login-form">
				<div id="error-message" class="error-message hidden">
					<p id="error-text"></p>
				</div>
				<div id="success-message" class="success-message hidden">
					<p id="success-text"></p>
				</div>
				<label for="email">Email:</label>
				<input type="email" id="email" name="email" class="border" required/>
				<label for="password">Password:</label>
				<input type="password" id="passwordasdfasd" name="password" class="border" required/>
				<label for="remember_me">
					<input type="checkbox" id="remember_me" name="remember_me"/>
					Remember Me
				</label>
				<button type="submit" id="submit-button" class="bg-primary-500">Sign In</button>
			</form>
			<p>Don't have an account? <a href="/register">Register</a></p>
		</div>
		<script>
			class LoginError extends Error {
				constructor(consoleMessage, userMessage) {
					super(consoleMessage);
					this.name = 'LoginError';
					this.userMessage = userMessage;
					this.consoleMessage = consoleMessage;
				}
			}
			
            document.addEventListener('DOMContentLoaded', function() {
                const loginForm = document.getElementById('login-form');
                const errorDiv = document.getElementById('error-message');
				const successDiv = document.getElementById('success-message');
				const errorText = document.getElementById('error-text');
				const successText = document.getElementById('success-text');
                const submitButton = document.getElementById('submit-button');

                loginForm.addEventListener('submit', async function(event) {
                    event.preventDefault();

                    // Hide previous messages
					errorDiv.classList.add('hidden');
					successDiv.classList.add('hidden');
					
					// Disable submit button and show loading state
					submitButton.disabled = true;

                    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                    const formData = new FormData(this);
					let requestBody = {
						"email": formData.get('email'),
						"password": formData.get('password'),
						"remember_me": formData.get('remember_me') === 'on'
					}

					try {
						const response = await fetch('/login', {
							method: 'POST',
							headers: {
								'X-CSRF-Token': csrfToken,
								'Content-Type': 'application/json',
								'Accept': 'application/json',
							},
							body: JSON.stringify(requestBody),
						});

						if (!response.ok) {
							// Handle error response
							const result = await response.json();
							
							if (!result.message) {
								throw new Error('Invalid server response');
							}
						
							throw new LoginError(`HTTP ${response.status}: ${result.message}`, result.message);
						}

						// Only execute this if login was successful
						const body = await response.json();

						if (!body || !body.data || !body.data.redirect_to) {
							throw new Error('Invalid server response');
						}

						const redirectTo = body.data.redirect_to;
						window.location.href = redirectTo;
					} catch (error) {
						let consoleMessage, userMessage;

						if (error instanceof LoginError) {
							consoleMessage = error.systemMessage || error.message;
							userMessage = error.userMessage || 'Login failed. Please try again.';
						} else {
							consoleMessage = error.message || 'An unexpected error occurred';
							userMessage = 'An unexpected error occurred. Please try again.';
						}

						// Handle network or other errors
						console.error('Login error:', consoleMessage);
						errorText.textContent = userMessage;
						errorDiv.classList.remove('hidden');
						
						// Re-enable submit button
						submitButton.disabled = false;
					}
                });
            });
		</script>
	}
}
