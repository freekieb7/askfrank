// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

package mocks

import (
	"askfrank/internal/model"

	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockRepository is a mock of RepositoryInterface.
type MockRepository struct {
	mock.Mock
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(user model.User) error {
	ret := m.Called(user)
	return ret.Error(0)
}

// CreateUserRegistration mocks base method.
func (m *MockRepository) CreateUserRegistration(userRegistration model.UserRegistration) error {
	ret := m.Called(userRegistration)
	return ret.Error(0)
}

// DeleteUserRegistration mocks base method.
func (m *MockRepository) DeleteUserRegistration(id uuid.UUID) error {
	ret := m.Called(id)
	return ret.Error(0)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(email string) (model.User, error) {
	ret := m.Called(email)
	return ret.Get(0).(model.User), ret.Error(1)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(id uuid.UUID) (model.User, error) {
	ret := m.Called(id)
	return ret.Get(0).(model.User), ret.Error(1)
}

// GetUserRegistrationByEmail mocks base method.
func (m *MockRepository) GetUserRegistrationByEmail(email string) (model.UserRegistration, error) {
	ret := m.Called(email)
	return ret.Get(0).(model.UserRegistration), ret.Error(1)
}

// GetUserRegistrationByUserID mocks base method.
func (m *MockRepository) GetUserRegistrationByUserID(userID uuid.UUID) (model.UserRegistration, error) {
	ret := m.Called(userID)
	return ret.Get(0).(model.UserRegistration), ret.Error(1)
}

// Migrate mocks base method.
func (m *MockRepository) Migrate() error {
	ret := m.Called()
	return ret.Error(0)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(user model.User) error {
	ret := m.Called(user)
	return ret.Error(0)
}

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	mock.Mock
}

// Set mocks base method.
func (m *MockSessionStore) Set(key string, value interface{}) error {
	ret := m.Called(key, value)
	return ret.Error(0)
}

// Get mocks base method.
func (m *MockSessionStore) Get(key string) (interface{}, error) {
	ret := m.Called(key)
	return ret.Get(0), ret.Error(1)
}

// Delete mocks base method.
func (m *MockSessionStore) Delete(key string) error {
	ret := m.Called(key)
	return ret.Error(0)
}

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	mock.Mock
}

// SendVerificationEmail mocks base method.
func (m *MockEmailService) SendVerificationEmail(email, token string) error {
	ret := m.Called(email, token)
	return ret.Error(0)
}

// SendPasswordResetEmail mocks base method.
func (m *MockEmailService) SendPasswordResetEmail(email, token string) error {
	ret := m.Called(email, token)
	return ret.Error(0)
}
