package view

import "askfrank/resource/view/component"
import "askfrank/internal/middleware"
import "askfrank/internal/model"

import "github.com/gofiber/fiber/v2"

templ AccountPage(c *fiber.Ctx, user model.User) {
	@component.Layout("My Account - AskFrank", c) {
		<div class="min-h-screen bg-gradient-to-br from-white to-[#EAF2EF] py-8 px-3 sm:px-4 lg:px-6">
			<div class="max-w-4xl mx-auto">
				<!-- Header -->
				<div class="bg-white rounded-lg shadow-lg p-6 mb-6">
					<div class="flex items-center justify-between">
						<div>
							<h1 class="text-2xl font-bold text-[#05668D] heading">
								{ middleware.T(c, "account.title") }
							</h1>
							<p class="text-base text-[#464646] mt-1">
								{ middleware.T(c, "account.subtitle") }
							</p>
						</div>
						<div class="hidden sm:block">
							<div class="w-16 h-16 bg-[#02C39A] rounded-full flex items-center justify-center">
								<i class="fas fa-user text-2xl text-white"></i>
							</div>
						</div>
					</div>
				</div>
				<div class="grid lg:grid-cols-3 gap-6">
					<!-- Account Information -->
					<div class="lg:col-span-2">
						<div class="bg-white rounded-lg shadow-lg p-6">
							<h2 class="text-xl font-bold text-[#05668D] heading mb-4">
								{ middleware.T(c, "account.info.title") }
							</h2>
							<div class="space-y-4">
								<!-- Name -->
								<div>
									<label class="block text-sm font-medium text-[#464646] mb-1">
										{ middleware.T(c, "account.info.name_label") }
									</label>
									<div class="p-2 bg-[#EAF2EF] rounded-md border">
										<span class="text-[#05668D] font-medium">{ user.Name }</span>
									</div>
								</div>
								<!-- Email -->
								<div>
									<label class="block text-sm font-medium text-[#464646] mb-1">
										{ middleware.T(c, "account.info.email_label") }
									</label>
									<div class="p-2 bg-[#EAF2EF] rounded-md border flex items-center justify-between">
										<span class="text-[#05668D] font-medium">{ user.Email }</span>
										if user.EmailVerified {
											<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
												<i class="fas fa-check-circle mr-1"></i>
												{ middleware.T(c, "account.info.email_verified") }
											</span>
										} else {
											<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
												<i class="fas fa-exclamation-circle mr-1"></i>
												{ middleware.T(c, "account.info.email_unverified") }
											</span>
										}
									</div>
								</div>
								<!-- Account Created -->
								<div>
									<label class="block text-sm font-medium text-[#464646] mb-1">
										{ middleware.T(c, "account.info.created_label") }
									</label>
									<div class="p-2 bg-[#EAF2EF] rounded-md border">
										<span class="text-[#05668D] font-medium">{ user.CreatedAt.Format("January 2, 2006") }</span>
									</div>
								</div>
								<!-- Account Actions -->
								<div class="pt-4 border-t border-gray-200">
									<h3 class="text-lg font-semibold text-[#05668D] mb-3">
										{ middleware.T(c, "account.actions.title") }
									</h3>
									<div class="space-y-2">
										<button class="w-full sm:w-auto bg-[#02C39A] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#028090] transition-colors duration-200">
											{ middleware.T(c, "account.actions.edit_profile") }
										</button>
										<button class="w-full sm:w-auto ml-0 sm:ml-2 bg-[#05668D] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#028090] transition-colors duration-200">
											{ middleware.T(c, "account.actions.change_password") }
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
					<!-- Account Status & Quick Actions -->
					<div class="space-y-4">
						<!-- Account Status -->
						<div class="bg-white rounded-lg shadow-lg p-4">
							<h3 class="text-lg font-bold text-[#05668D] heading mb-3">
								{ middleware.T(c, "account.status.title") }
							</h3>
							<div class="space-y-3">
								<div class="flex items-center justify-between">
									<span class="text-sm text-[#464646]">{ middleware.T(c, "account.status.account_status") }</span>
									<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
										<i class="fas fa-check-circle mr-1"></i>
										{ middleware.T(c, "account.status.active") }
									</span>
								</div>
								<div class="flex items-center justify-between">
									<span class="text-sm text-[#464646]">{ middleware.T(c, "account.status.member_since") }</span>
									<span class="text-sm font-medium text-[#05668D]">
										{ user.CreatedAt.Format("Jan 2006") }
									</span>
								</div>
							</div>
						</div>
						<!-- Quick Actions -->
						<div class="bg-white rounded-lg shadow-lg p-4">
							<h3 class="text-lg font-bold text-[#05668D] heading mb-3">
								{ middleware.T(c, "account.quick_actions.title") }
							</h3>
							<div class="space-y-2">
								<a href="/dashboard" class="block w-full text-center bg-[#05668D] text-white px-3 py-2 rounded-lg font-semibold hover:bg-[#028090] transition-colors duration-200">
									<i class="fas fa-tachometer-alt mr-2"></i>
									Go to Dashboard
								</a>
								<a href="/contact" class="block w-full text-center bg-gray-100 text-[#464646] px-3 py-2 rounded-lg font-semibold hover:bg-gray-200 transition-colors duration-200">
									<i class="fas fa-headset mr-2"></i>
									{ middleware.T(c, "account.quick_actions.contact_support") }
								</a>
								<a href="/pricing" class="block w-full text-center bg-gray-100 text-[#464646] px-3 py-2 rounded-lg font-semibold hover:bg-gray-200 transition-colors duration-200">
									<i class="fas fa-credit-card mr-2"></i>
									{ middleware.T(c, "account.quick_actions.view_pricing") }
								</a>
								<button onclick="confirmLogout()" class="block w-full text-center bg-red-100 text-red-700 px-3 py-2 rounded-lg font-semibold hover:bg-red-200 transition-colors duration-200">
									<i class="fas fa-sign-out-alt mr-2"></i>
									{ middleware.T(c, "account.quick_actions.logout") }
								</button>
							</div>
						</div>
						<!-- Security Notice -->
						<div class="bg-[#EAF2EF] border-l-4 border-[#02C39A] p-3 rounded-lg">
							<div class="flex">
								<div class="flex-shrink-0">
									<i class="fas fa-shield-alt text-[#02C39A]"></i>
								</div>
								<div class="ml-2">
									<h4 class="text-sm font-medium text-[#05668D]">
										{ middleware.T(c, "account.security.title") }
									</h4>
									<p class="text-sm text-[#464646] mt-1">
										{ middleware.T(c, "account.security.message") }
									</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Hidden CSRF token for JavaScript -->
		if csrfToken, ok := c.Locals("token").(string); ok {
			<meta name="csrf-token" content={ csrfToken }/>
		}
		<script>
			function confirmLogout() {
				if (confirm('Are you sure you want to logout?')) {
					// Create a form for POST logout with CSRF protection
					const form = document.createElement('form');
					form.method = 'POST';
					form.action = '/auth/logout';
					
					// Add CSRF token from meta tag
					const csrfToken = document.querySelector('meta[name="csrf-token"]');
					if (csrfToken) {
						const csrfInput = document.createElement('input');
						csrfInput.type = 'hidden';
						csrfInput.name = 'csrf_token';
						csrfInput.value = csrfToken.getAttribute('content');
						form.appendChild(csrfInput);
					}
					
					document.body.appendChild(form);
					form.submit();
				}
			}
		</script>
	}
}
