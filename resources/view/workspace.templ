package view

import (
	"askfrank/internal/model"
	"askfrank/resources/view/component"
	"github.com/gofiber/fiber/v2"
	"strconv"
)

templ WorkspacePage(c *fiber.Ctx, user model.User, folders []model.Folder, documents []model.Document) {
	@component.DashboardLayout("Workspace", c, user, WorkspaceContent(folders, documents))
}

templ WorkspaceContent(folders []model.Folder, documents []model.Document) {
	<div class="container mx-auto px-4 py-8">
		<div class="mb-8">
			<h1 class="text-3xl font-bold text-gray-900 mb-2">My Workspace</h1>
			<p class="text-gray-600">Organize and manage your documents and folders</p>
		</div>
		<!-- Quick Actions -->
		<div class="mb-8">
			<div class="flex flex-wrap gap-4">
				<button
					onclick="showCreateFolderModal()"
					class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
				>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
					</svg>
					New Folder
				</button>
				<button
					onclick="showCreateDocumentModal()"
					class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
				>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
					</svg>
					New Document
				</button>
			</div>
		</div>
		<div class="grid lg:grid-cols-2 gap-8">
			<!-- Folders Section -->
			<div class="bg-white rounded-lg shadow-md">
				<div class="p-6 border-b border-gray-200">
					<h2 class="text-xl font-semibold text-gray-900 flex items-center gap-2">
						<svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
						</svg>
						Folders ({ strconv.Itoa(len(folders)) })
					</h2>
				</div>
				<div class="p-6">
					if len(folders) == 0 {
						<div class="text-center py-8">
							<svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
							</svg>
							<p class="text-gray-500 mb-4">No folders yet</p>
							<button
								onclick="showCreateFolderModal()"
								class="text-blue-600 hover:text-blue-800 font-medium"
							>
								Create your first folder
							</button>
						</div>
					} else {
						<div class="space-y-3">
							for _, folder := range folders {
								<div class="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
									<div class="flex items-center justify-between">
										<div class="flex items-center gap-3">
											<svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
											</svg>
											<div>
												<h3 class="font-medium text-gray-900">{ folder.Name }</h3>
												<p class="text-sm text-gray-500">Created { folder.LastModified.Format("Jan 2, 2006") }</p>
											</div>
										</div>
										<div class="flex items-center gap-2">
											<button
												onclick="openFolder('{ folder.ID.String() }')"
												class="text-blue-600 hover:text-blue-800 px-3 py-1 text-sm font-medium"
											>
												Open
											</button>
											<button
												onclick="deleteFolder('{ folder.ID.String() }')"
												class="text-red-600 hover:text-red-800 px-3 py-1 text-sm font-medium"
											>
												Delete
											</button>
										</div>
									</div>
								</div>
							}
						</div>
					}
				</div>
			</div>
			<!-- Documents Section -->
			<div class="bg-white rounded-lg shadow-md">
				<div class="p-6 border-b border-gray-200">
					<h2 class="text-xl font-semibold text-gray-900 flex items-center gap-2">
						<svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
						</svg>
						Recent Documents ({ strconv.Itoa(len(documents)) })
					</h2>
				</div>
				<div class="p-6">
					if len(documents) == 0 {
						<div class="text-center py-8">
							<svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
							</svg>
							<p class="text-gray-500 mb-4">No documents yet</p>
							<button
								onclick="showCreateDocumentModal()"
								class="text-green-600 hover:text-green-800 font-medium"
							>
								Create your first document
							</button>
						</div>
					} else {
						<div class="space-y-3">
							for _, document := range documents {
								<div class="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
									<div class="flex items-center justify-between">
										<div class="flex items-center gap-3">
											<svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
											</svg>
											<div>
												<h3 class="font-medium text-gray-900">{ document.Name }</h3>
												<p class="text-sm text-gray-500">
													Created { document.LastModified.Format("Jan 2, 2006") }
													if document.FolderID != nil {
														// Show folder info if document is in a folder
														// Note: We'd need to join with folders table or fetch folder names separately
													}
												</p>
											</div>
										</div>
										<div class="flex items-center gap-2">
											<button
												onclick={ templ.JSFuncCall("openDocument", document.ID.String()) }
												class="text-green-600 hover:text-green-800 px-3 py-1 text-sm font-medium"
											>
												Open
											</button>
											<button
												onclick={ templ.JSFuncCall("deleteDocument", document.ID.String()) }
												class="text-red-600 hover:text-red-800 px-3 py-1 text-sm font-medium"
											>
												Delete
											</button>
										</div>
									</div>
								</div>
							}
						</div>
					}
				</div>
			</div>
		</div>
	</div>
	<!-- Create Folder Modal -->
	<div id="createFolderModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
		<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
			<h3 class="text-lg font-semibold text-gray-900 mb-4">Create New Folder</h3>
			<form onsubmit="createFolder(event)">
				<div class="mb-4">
					<label for="folderName" class="block text-sm font-medium text-gray-700 mb-2">Folder Name</label>
					<input
						type="text"
						id="folderName"
						name="folderName"
						required
						class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
						placeholder="Enter folder name"
					/>
				</div>
				<div class="flex justify-end gap-3">
					<button
						type="button"
						onclick="hideCreateFolderModal()"
						class="px-4 py-2 text-gray-600 hover:text-gray-800"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg"
					>
						Create Folder
					</button>
				</div>
			</form>
		</div>
	</div>
	<!-- Create Document Modal -->
	<div id="createDocumentModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
		<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
			<h3 class="text-lg font-semibold text-gray-900 mb-4">Create New Document</h3>
			<form onsubmit="createDocument(event)">
				<div class="mb-4">
					<label for="documentName" class="block text-sm font-medium text-gray-700 mb-2">Document Name</label>
					<input
						type="text"
						id="documentName"
						name="documentName"
						required
						class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
						placeholder="Enter document name"
					/>
				</div>
				<div class="mb-4">
					<label for="documentFolder" class="block text-sm font-medium text-gray-700 mb-2">Folder (Optional)</label>
					<select
						id="documentFolder"
						name="documentFolder"
						class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
					>
						<option value="">No folder</option>
						for _, folder := range folders {
							<option value={ folder.ID.String() }>{ folder.Name }</option>
						}
					</select>
				</div>
				<div class="flex justify-end gap-3">
					<button
						type="button"
						onclick="hideCreateDocumentModal()"
						class="px-4 py-2 text-gray-600 hover:text-gray-800"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg"
					>
						Create Document
					</button>
				</div>
			</form>
		</div>
	</div>
	<!-- JavaScript for interactivity -->
	<script>
			function showCreateFolderModal() {
				document.getElementById('createFolderModal').classList.remove('hidden');
			}

			function hideCreateFolderModal() {
				document.getElementById('createFolderModal').classList.add('hidden');
				document.getElementById('folderName').value = '';
			}

			function showCreateDocumentModal() {
				document.getElementById('createDocumentModal').classList.remove('hidden');
			}

			function hideCreateDocumentModal() {
				document.getElementById('createDocumentModal').classList.add('hidden');
				document.getElementById('documentName').value = '';
				document.getElementById('documentFolder').value = '';
			}

			async function createFolder(event) {
				event.preventDefault();
				const folderName = document.getElementById('folderName').value;
				const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

				try {
					const formData = new FormData();
					formData.append('name', folderName);

					const response = await fetch('/api/folders', {
						method: 'POST',
						headers: {
							'X-CSRF-Token': csrfToken
						},
						body: formData
					});

					if (response.ok) {
						hideCreateFolderModal();
						window.location.reload();
					} else {
						alert('Failed to create folder');
					}
				} catch (error) {
					alert('Error creating folder');
				}
			}

			async function createDocument(event) {
				event.preventDefault();
				const documentName = document.getElementById('documentName').value;
				const folderId = document.getElementById('documentFolder').value;
				const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

				const formData = new FormData();
				formData.append('name', documentName);
				if (folderId) {
					formData.append('folder_id', folderId);
				}
				
				try {
					const response = await fetch('/api/documents', {
						method: 'POST',
						headers: {
							'X-CSRF-Token': csrfToken
						},
						body: formData
					});

					if (response.ok) {
						hideCreateDocumentModal();
						window.location.reload();
					} else {
						alert('Failed to create document');
					}
				} catch (error) {
					alert('Error creating document');
				}
			}

			function openFolder(folderId) {
				window.location.href = `/workspace/folders/${folderId}`;
			}

			function openDocument(documentId) {
				window.location.href = `/workspace/documents/${documentId}`;
			}

			async function deleteFolder(folderId) {
				if (confirm('Are you sure you want to delete this folder? This action cannot be undone.')) {
					try {
						const response = await fetch(`/api/folders/${folderId}`, {
							method: 'DELETE'
						});

						if (response.ok) {
							window.location.reload();
						} else {
							alert('Failed to delete folder');
						}
					} catch (error) {
						alert('Error deleting folder');
					}
				}
			}

			async function deleteDocument(documentId) {
				if (confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
					try {
						const response = await fetch(`/api/documents/${documentId}`, {
							method: 'DELETE'
						});

						if (response.ok) {
							window.location.reload();
						} else {
							alert('Failed to delete document');
						}
					} catch (error) {
						alert('Error deleting document');
					}
				}
			}

			// Close modals when clicking outside
			document.addEventListener('click', function(event) {
				const folderModal = document.getElementById('createFolderModal');
				const documentModal = document.getElementById('createDocumentModal');
				
				if (event.target === folderModal) {
					hideCreateFolderModal();
				}
				if (event.target === documentModal) {
					hideCreateDocumentModal();
				}
			});
		</script>
}
