package view

import (
	"askfrank/internal/middleware"
	"askfrank/internal/model"
	"askfrank/resources/view/component"
	"fmt"
	"github.com/gofiber/fiber/v2"
)

type AdminUserViewData struct {
	User         model.User
	Registration *model.UserRegistration
	CanActivate  bool
	CanDelete    bool
}

templ AdminUserView(c *fiber.Ctx, data AdminUserViewData) {
	@component.Layout(middleware.T(c, "admin.user.view_title"), c) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header with Back Button -->
				<div class="mb-8 flex items-center justify-between">
					<div class="flex items-center">
						<a href="/admin" class="text-blue-600 hover:text-blue-800 mr-4">
							<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
							</svg>
						</a>
						<div>
							<h1 class="text-3xl font-bold text-gray-900">{ middleware.T(c, "admin.user.view_title") }</h1>
							<p class="mt-2 text-gray-600">{ data.User.Email }</p>
						</div>
					</div>
					<!-- Action Buttons -->
					<div class="flex space-x-3">
						if data.CanActivate {
							<button
								class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
								hx-post={ fmt.Sprintf("/admin/users/%s/activate", data.User.ID.String()) }
								hx-target="#user-status"
								hx-swap="outerHTML"
								hx-headers='{"X-CSRF-Token": "{{ c.Locals("token") }}"}'
								hx-confirm={ middleware.T(c, "admin.users.activate_confirm") }
							>
								<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
								{ middleware.T(c, "admin.users.activate") }
							</button>
						}
						if data.CanDelete {
							<button
								class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
								hx-delete={ fmt.Sprintf("/admin/users/%s", data.User.ID.String()) }
								hx-target="body"
								hx-swap="none"
								hx-headers='{"X-CSRF-Token": "{{ c.Locals("token") }}"}'
								hx-confirm={ middleware.T(c, "admin.users.delete_confirm") }
								onclick="if(event.target.closest('button').getAttribute('hx-confirm')) { setTimeout(() => window.location.href = '/admin', 500); }"
							>
								<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
								</svg>
								{ middleware.T(c, "admin.users.delete") }
							</button>
						}
					</div>
				</div>
				<!-- User Information Cards -->
				<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
					<!-- Basic Information -->
					<div class="bg-white rounded-lg shadow-lg p-6">
						<h2 class="text-lg font-semibold text-gray-900 mb-4">
							{ middleware.T(c, "admin.user.basic_info") }
						</h2>
						<dl class="space-y-4">
							<div>
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.name") }</dt>
								<dd class="mt-1 text-sm text-gray-900">{ data.User.Name }</dd>
							</div>
							<div>
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.email") }</dt>
								<dd class="mt-1 text-sm text-gray-900">{ data.User.Email }</dd>
							</div>
							<div>
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.role") }</dt>
								<dd class="mt-1">
									<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
										{ data.User.Role }
									</span>
								</dd>
							</div>
							<div>
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.user_id") }</dt>
								<dd class="mt-1 text-xs text-gray-600 font-mono">{ data.User.ID.String() }</dd>
							</div>
						</dl>
					</div>
					<!-- Account Status -->
					<div class="bg-white rounded-lg shadow-lg p-6">
						<h2 class="text-lg font-semibold text-gray-900 mb-4">
							{ middleware.T(c, "admin.user.account_status") }
						</h2>
						<dl class="space-y-4">
							<div id="user-status">
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.verification_status") }</dt>
								<dd class="mt-1">
									if data.User.IsEmailVerified {
										<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
											<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
											</svg>
											{ middleware.T(c, "admin.users.verified") }
										</span>
									} else if data.Registration != nil {
										<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">
											<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
											</svg>
											{ middleware.T(c, "admin.users.pending") }
										</span>
									} else {
										<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
											<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
											</svg>
											{ middleware.T(c, "admin.users.inactive") }
										</span>
									}
								</dd>
							</div>
							<div>
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.member_since") }</dt>
								<dd class="mt-1 text-sm text-gray-900">{ data.User.CreatedAt.Format("January 2, 2006") }</dd>
							</div>
							<div>
								<dt class="text-sm font-medium text-gray-500">{ middleware.T(c, "admin.user.last_updated") }</dt>
								<dd class="mt-1 text-sm text-gray-900">{ data.User.UpdatedAt.Format("January 2, 2006 at 3:04 PM") }</dd>
							</div>
						</dl>
					</div>
				</div>
				<!-- Registration Details (if pending) -->
				if data.Registration != nil {
					<div class="bg-white rounded-lg shadow-lg p-6 mb-8">
						<h2 class="text-lg font-semibold text-gray-900 mb-4">
							{ middleware.T(c, "admin.user.registration_details") }
						</h2>
						<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-yellow-800">
										{ middleware.T(c, "admin.user.pending_activation") }
									</h3>
									<div class="mt-2 text-sm text-yellow-700">
										<p>{ middleware.T(c, "admin.user.pending_description") }</p>
									</div>
									<dl class="mt-4 space-y-2">
										<div>
											<dt class="text-sm font-medium text-yellow-800">{ middleware.T(c, "admin.user.registration_id") }</dt>
											<dd class="text-xs text-yellow-700 font-mono">{ data.Registration.ID.String() }</dd>
										</div>
										<div>
											<dt class="text-sm font-medium text-yellow-800">{ middleware.T(c, "admin.user.activation_code") }</dt>
											<dd class="text-xs text-yellow-700 font-mono">{ data.Registration.ActivationCode }</dd>
										</div>
										<div>
											<dt class="text-sm font-medium text-yellow-800">{ middleware.T(c, "admin.user.registration_date") }</dt>
											<dd class="text-sm text-yellow-700">{ data.Registration.CreatedAt.Format("January 2, 2006 at 3:04 PM") }</dd>
										</div>
									</dl>
								</div>
							</div>
						</div>
					</div>
				}
				<!-- Activity Timeline -->
				<div class="bg-white rounded-lg shadow-lg p-6">
					<h2 class="text-lg font-semibold text-gray-900 mb-4">
						{ middleware.T(c, "admin.user.activity_timeline") }
					</h2>
					<div class="flow-root">
						<ul class="-mb-8">
							<li>
								<div class="relative pb-8">
									<span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200"></span>
									<div class="relative flex space-x-3">
										<div>
											<span class="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white">
												<svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
												</svg>
											</span>
										</div>
										<div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
											<div>
												<p class="text-sm text-gray-500">
													{ middleware.T(c, "admin.user.account_created") }
												</p>
											</div>
											<div class="text-right text-sm whitespace-nowrap text-gray-500">
												{ data.User.CreatedAt.Format("Jan 2, 2006") }
											</div>
										</div>
									</div>
								</div>
							</li>
							if data.Registration != nil {
								<li>
									<div class="relative pb-8">
										<span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200"></span>
										<div class="relative flex space-x-3">
											<div>
												<span class="h-8 w-8 rounded-full bg-yellow-500 flex items-center justify-center ring-8 ring-white">
													<svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
													</svg>
												</span>
											</div>
											<div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
												<div>
													<p class="text-sm text-gray-500">
														{ middleware.T(c, "admin.user.registration_pending") }
													</p>
												</div>
												<div class="text-right text-sm whitespace-nowrap text-gray-500">
													{ data.Registration.CreatedAt.Format("Jan 2, 2006") }
												</div>
											</div>
										</div>
									</div>
								</li>
							}
							if data.User.IsEmailVerified {
								<li>
									<div class="relative">
										<div class="relative flex space-x-3">
											<div>
												<span class="h-8 w-8 rounded-full bg-green-500 flex items-center justify-center ring-8 ring-white">
													<svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
														<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
													</svg>
												</span>
											</div>
											<div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
												<div>
													<p class="text-sm text-gray-500">
														{ middleware.T(c, "admin.user.account_verified") }
													</p>
												</div>
												<div class="text-right text-sm whitespace-nowrap text-gray-500">
													{ middleware.T(c, "admin.user.verified") }
												</div>
											</div>
										</div>
									</div>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
		</div>
	}
}
