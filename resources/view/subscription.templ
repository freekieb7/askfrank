package view

import (
	"askfrank/internal/middleware"
	"askfrank/internal/model"
	"askfrank/resources/view/component"
	"fmt"
	"github.com/gofiber/fiber/v2"
)

templ SubscriptionPlansPage(c *fiber.Ctx, user model.User, plans []model.SubscriptionPlan, currentSubscription *model.UserSubscription) {
	@component.DashboardLayout(middleware.T(c, "subscription.plans.title"), c, user, SubscriptionPlansContent(c, plans, currentSubscription))
}

templ SubscriptionPlansContent(c *fiber.Ctx, plans []model.SubscriptionPlan, currentSubscription *model.UserSubscription) {
	<div class="container mx-auto px-4 py-6">
		<!-- Header -->
		<div class="text-center mb-8">
			<h1 class="text-2xl font-bold text-[#05668D] mb-2">{ middleware.T(c, "subscription.plans.title") }</h1>
			<p class="text-gray-600">{ middleware.T(c, "subscription.plans.subtitle") }</p>
		</div>
		<!-- Current Subscription Status -->
		if currentSubscription != nil {
			<div class="mb-8">
				<div class="bg-[#EAF2EF] border border-[#02C39A] rounded-lg p-4">
					<div class="flex items-center justify-between">
						<div>
							<h3 class="font-semibold text-[#05668D]">{ middleware.T(c, "subscription.current.title") }</h3>
							<p class="text-sm text-gray-600">
								{ currentSubscription.Plan.Name } - 
								€{ fmt.Sprintf("%.2f", float64(currentSubscription.Plan.AmountCents)/100) }/{ middleware.T(c, "subscription.month") }
							</p>
							<p class="text-xs text-gray-500">
								{ middleware.T(c, "subscription.next_billing") }: { currentSubscription.CurrentPeriodEnd.Format("January 2, 2006") }
							</p>
						</div>
						<div class="flex gap-2">
							if currentSubscription.Status == "active" {
								<button
									onclick="cancelSubscription()"
									class="px-4 py-2 text-sm text-red-600 border border-red-600 rounded-lg hover:bg-red-50 transition-colors"
								>
									{ middleware.T(c, "subscription.cancel") }
								</button>
							}
						</div>
					</div>
				</div>
			</div>
		}
		<!-- Pricing Plans -->
		<div class="grid md:grid-cols-3 gap-6">
			for _, plan := range plans {
				<div class="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
					<!-- Plan Header -->
					<div class="text-center mb-6">
						<h3 class="text-xl font-bold text-[#05668D] mb-2">{ plan.Name }</h3>
						<p class="text-gray-600 text-sm mb-4">{ plan.Description }</p>
						<div class="mb-4">
							<span class="text-3xl font-bold text-[#05668D]">
								€{ fmt.Sprintf("%.0f", float64(plan.AmountCents)/100) }
							</span>
							<span class="text-gray-500">/{ middleware.T(c, "subscription.month") }</span>
						</div>
					</div>
					<!-- Features List -->
					<div class="mb-6">
						<ul class="space-y-2">
							<!-- Parse and display features from JSON -->
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-[#02C39A] mr-2"></i>
								{ middleware.T(c, "subscription.feature.patient_management") }
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-[#02C39A] mr-2"></i>
								{ middleware.T(c, "subscription.feature.reports") }
							</li>
							<li class="flex items-center text-sm">
								<i class="fas fa-check text-[#02C39A] mr-2"></i>
								{ middleware.T(c, "subscription.feature.support") }
							</li>
						</ul>
					</div>
					<!-- CTA Button -->
					<div class="text-center">
						if currentSubscription != nil && currentSubscription.Plan != nil && currentSubscription.Plan.ID == plan.ID {
							<button class="w-full py-2 px-4 bg-gray-200 text-gray-500 rounded-lg cursor-not-allowed">
								{ middleware.T(c, "subscription.current_plan") }
							</button>
						} else {
							<button
								onclick={ subscribeToPlan(plan.ID.String()) }
								class="w-full py-2 px-4 bg-[#05668D] hover:bg-[#028090] text-white rounded-lg transition-colors font-medium"
							>
								if currentSubscription != nil {
									{ middleware.T(c, "subscription.upgrade") }
								} else {
									{ middleware.T(c, "subscription.start_trial") }
								}
							</button>
						}
					</div>
				</div>
			}
		</div>
		<!-- Trial Information -->
		<div class="mt-8 text-center">
			<p class="text-sm text-gray-600">
				{ middleware.T(c, "subscription.trial_info") }
			</p>
		</div>
	</div>
	<script>
		async function subscribeToPlan(planId) {
			try {
				const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
				const response = await fetch('/api/subscription/checkout', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRF-Token': csrfToken
					},
					body: JSON.stringify({
						plan_id: planId,
						success_url: window.location.origin + '/subscription/success',
						cancel_url: window.location.href
					})
				});
				
				const data = await response.json();
				if (data.checkout_url) {
					window.location.href = data.checkout_url;
				} else {
					alert('Failed to create checkout session');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred. Please try again.');
			}
		}
		
		async function cancelSubscription() {
			if (!confirm('Are you sure you want to cancel your subscription? It will remain active until the end of your current billing period.')) {
				return;
			}
			
			try {
				const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
				const response = await fetch('/api/subscription/cancel', {
					method: 'POST',
					headers: {
						'X-CSRF-Token': csrfToken
					}
				});
				
				if (response.ok) {
					window.location.reload();
				} else {
					alert('Failed to cancel subscription');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred. Please try again.');
			}
		}
	</script>
}

script subscribeToPlan(planId string) {
	subscribeToPlan(planId);
}
