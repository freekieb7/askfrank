package view

import "askfrank/resources/view/component"
import "askfrank/internal/middleware"

import "github.com/gofiber/fiber/v2"

templ CreateUserPage(c *fiber.Ctx) {
	@component.Layout("Create Account - AskFrank", c) {
		<!-- reCAPTCHA script -->
		<script src="https://www.google.com/recaptcha/api.js" async defer></script>
		<div class="min-h-screen bg-gradient-to-br from-white to-[#EAF2EF] flex items-center justify-center py-8 px-3 sm:px-4 lg:px-6">
			<div class="max-w-md w-full space-y-6">
				<div class="text-center">
					<h2 class="mt-4 text-2xl font-bold text-[#05668D] heading">
						{ middleware.T(c, "auth.signup.title") }
					</h2>
					<p class="mt-1 text-sm text-[#464646]">
						{ middleware.T(c, "auth.signup.subtitle") }
					</p>
				</div>
				<div class="bg-white rounded-lg shadow-lg p-6">
					<form id="signupForm" class="space-y-4" action="/auth/sign-up/create-user" method="POST">
						<!-- Honeypot field (hidden from users, catches bots) -->
						<div style="display: none;">
							<label for="website">Website (leave blank):</label>
							<input type="text" id="website" name="website" tabindex="-1" autocomplete="off"/>
						</div>
						<!-- Error message display -->
						<div id="error-message" class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-md">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-red-800" id="error-text">
										<!-- Error message will be inserted here -->
									</h3>
								</div>
							</div>
						</div>
						<!-- Success message display -->
						<div id="success-message" class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-md">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-green-800" id="success-text">
										<!-- Success message will be inserted here -->
									</h3>
								</div>
							</div>
						</div>
						<div>
							<label for="email" class="block text-sm font-medium text-[#464646] mb-1">
								{ middleware.T(c, "auth.signup.email_label") }
							</label>
							<input
								id="email"
								name="email"
								type="email"
								autocomplete="email"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#02C39A] focus:border-[#02C39A] transition-colors duration-200"
								placeholder={ middleware.T(c, "auth.signup.email_placeholder") }
							/>
						</div>
						<div>
							<label for="password" class="block text-sm font-medium text-[#464646] mb-1">
								{ middleware.T(c, "auth.signup.password_label") }
							</label>
							<input
								id="password"
								name="password"
								type="password"
								autocomplete="new-password"
								required
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#02C39A] focus:border-[#02C39A] transition-colors duration-200"
								placeholder={ middleware.T(c, "auth.signup.password_placeholder") }
							/>
							<p class="mt-1 text-xs text-[#464646]">
								{ middleware.T(c, "auth.signup.password_hint") }
							</p>
						</div>
						<div class="flex items-start">
							<div class="flex items-center h-5">
								<input
									id="terms"
									name="terms"
									type="checkbox"
									required
									class="h-4 w-4 text-[#02C39A] focus:ring-[#02C39A] border-gray-300 rounded"
								/>
							</div>
							<div class="ml-2 text-sm">
								<label for="terms" class="text-[#464646]">
									{ middleware.T(c, "auth.signup.terms_prefix") }
									<a href="/terms" class="text-[#02C39A] hover:text-[#028090] underline">
										{ middleware.T(c, "auth.signup.terms_link") }
									</a>
									{ middleware.T(c, "auth.signup.terms_suffix") }
									<a href="/privacy" class="text-[#02C39A] hover:text-[#028090] underline">
										{ middleware.T(c, "auth.signup.privacy_link") }
									</a>
								</label>
							</div>
						</div>
						<div class="flex items-start">
							<div class="flex items-center h-5">
								<input
									id="newsletter"
									name="newsletter"
									type="checkbox"
									class="h-4 w-4 text-[#02C39A] focus:ring-[#02C39A] border-gray-300 rounded"
								/>
							</div>
							<div class="ml-2 text-sm">
								<label for="newsletter" class="text-[#464646]">
									{ middleware.T(c, "auth.signup.newsletter_label") }
								</label>
							</div>
						</div>
						<!-- reCAPTCHA -->
						<div class="mb-4">
							if siteKey, ok := c.Locals("recaptcha_site_key").(string); ok && siteKey != "" {
								<div class="g-recaptcha" data-sitekey={ siteKey }></div>
							}
						</div>
						<div class="pt-2">
							<button
								type="submit"
								class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#02C39A] hover:bg-[#028090] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#02C39A] transition-colors duration-200"
							>
								{ middleware.T(c, "auth.signup.submit_button") }
							</button>
						</div>
						<div class="text-center">
							<p class="text-sm text-[#464646]">
								{ middleware.T(c, "auth.signup.signin_prefix") }
								<a href="/auth/login" class="text-[#02C39A] hover:text-[#028090] font-medium underline">
									{ middleware.T(c, "auth.signup.signin_link") }
								</a>
							</p>
						</div>
					</form>
				</div>
				<div class="mt-4 text-center">
					<p class="text-xs text-[#464646]">
						{ middleware.T(c, "auth.signup.footer_note") }
					</p>
				</div>
			</div>
		</div>
		<script>
			// Handle form submission with AJAX for better UX
			document.querySelector('#signupForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				const formData = new FormData(this);
				const errorDiv = document.getElementById('error-message');
				const successDiv = document.getElementById('success-message');
				const errorText = document.getElementById('error-text');
				const successText = document.getElementById('success-text');
				const submitButton = this.querySelector('button[type="submit"]');
				
				// Hide previous messages
				errorDiv.classList.add('hidden');
				successDiv.classList.add('hidden');
				
				// Disable submit button during request
				submitButton.disabled = true;
				submitButton.textContent = 'Creating Account...';
				
				try {
					// Get CSRF token from meta tag
					const csrfTokenMeta = document.querySelector('meta[name="csrf-token"]');
					if (!csrfTokenMeta) {
						throw new Error('CSRF token not found in meta tag');
					}
					const csrfToken = csrfTokenMeta.content;
					if (!csrfToken) {
						throw new Error('CSRF token is empty');
					}
					
					console.log('CSRF Token:', csrfToken); // Debug log
					
					const response = await fetch('/auth/sign-up/create-user', {
						method: 'POST',
						headers: {
							'X-Csrf-Token': csrfToken
						},
						body: formData
					});
					
					if (response.redirected) {
						// Successful signup, redirect to check inbox
						window.location.href = response.url;
						return;
					}
					
					const result = await response.json();
					
					if (!response.ok) {
						// Show error message
						errorText.textContent = result.error || 'Account creation failed';
						errorDiv.classList.remove('hidden');
					} else {
						// Show success message (though this case might not occur due to redirect)
						successText.textContent = 'Account created successfully! Redirecting...';
						successDiv.classList.remove('hidden');
						setTimeout(() => {
							window.location.href = '/auth/sign-up/check-inbox';
						}, 1000);
					}
				} catch (error) {
					errorText.textContent = 'Network error. Please try again.';
					errorDiv.classList.remove('hidden');
				} finally {
					// Re-enable submit button
					submitButton.disabled = false;
					submitButton.textContent = {{ middleware.T(c, "auth.signup.submit_button") }};
				}
			});
		</script>
	}
}
