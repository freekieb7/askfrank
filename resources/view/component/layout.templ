package component

import (
	"askfrank/internal/middleware"
	"github.com/gofiber/fiber/v2"
)

templ Layout(title string, c *fiber.Ctx) {
	<!DOCTYPE html>
	<html lang={ middleware.GetLang(c) }>
		<head>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
			<script src="https://cdn.tailwindcss.com"></script>
			<link
				rel="stylesheet"
				href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
				integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
				crossorigin="anonymous"
				referrerpolicy="no-referrer"
			/>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<!-- Hidden CSRF token for JavaScript -->
			if csrfToken, ok := c.Locals("token").(string); ok {
				<meta name="csrf-token" content={ csrfToken }/>
			}
			<title>{ title }</title>
			<link
				href="https://fonts.googleapis.com/css2?family=Poppins:wght@600;800&family=Source+Sans+Pro:wght@400;600&display=swap"
				rel="stylesheet"
			/>
			<style>
                body {
                    font-family: 'Source Sans Pro', Calibri, Arial, sans-serif;
                    color: #464646;
                }

                h1,
                h2,
                h3,
                h4,
                h5,
                h6,
                .heading {
                    font-family: 'Poppins', Scandia, Arial, sans-serif;
                    color: #05668D;
                }

                .nav-link {
                    color: #464646;
                    font-weight: 600;
                }

                .nav-link:hover {
                    color: #02C39A;
                }

                .nav-link.active {
                    color: #05668D;
                }

                .accent-blue {
                    color: #3B73B9;
                }

                .accent-turquoise {
                    color: #18A1B7;
                }

                .secondary-blue {
                    color: #5486C9;
                }

                .code24-green {
                    color: #00D8C3;
                }

                .slate-gray {
                    color: #3F4A5C;
                }

                .code24-gray {
                    color: #464646;
                }
            </style>
		</head>
		<body class="bg-gray-100 min-h-screen flex flex-col">
			<!-- Top Navigation Bar -->
			<header class="bg-white shadow-sm border-b border-[#eaeaea]">
				<div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6">
					<div class="flex justify-between items-center h-12">
						<!-- Logo/Brand -->
						<div class="flex items-center">
							<a href="/" class="flex items-center hover:opacity-80 transition-opacity duration-200">
								<h1 class="text-lg font-bold text-[#05668D] heading">{ middleware.T(c, "nav.brand") }</h1>
							</a>
						</div>
						<!-- Navigation Links -->
						<nav class="hidden md:flex items-center space-x-6">
							<a href="/products" class="nav-link transition-colors duration-200">
								{ middleware.T(c, "nav.products") }
							</a>
							<a href="/learn" class="nav-link transition-colors duration-200">
								{ middleware.T(c, "nav.learn") }
							</a>
							<a href="/docs" class="nav-link transition-colors duration-200">{ middleware.T(c, "nav.docs") }</a>
							<a href="/pricing" class="nav-link transition-colors duration-200">
								{ middleware.T(c, "nav.pricing") }
							</a>
							<!-- Separator -->
							<div class="border-l border-gray-300 h-5 mx-2"></div>
							<!-- Secondary Navigation -->
							<a href="/contact" class="nav-link transition-colors duration-200">
								{ middleware.T(c, "nav.contact") }
							</a>
							@LanguageSwitcher(c)
							<a
								href="/account"
								class="bg-[#05668D] text-white px-3 py-1.5 rounded-lg font-semibold hover:bg-[#028090] transition-colors duration-200 text-sm"
							>
								{ middleware.T(c, "nav.account") }
							</a>
						</nav>
						<!-- Mobile menu button -->
						<div class="md:hidden">
							<button
								type="button"
								class="text-[#464646] hover:text-[#02C39A] focus:outline-none focus:text-[#05668D]"
								onclick="toggleMobileMenu()"
							>
								<i class="fas fa-bars text-xl"></i>
							</button>
						</div>
					</div>
				</div>
				<!-- Mobile Navigation Menu -->
				<div id="mobile-menu" class="md:hidden hidden">
					<div class="px-2 pt-1 pb-2 space-y-1 bg-white border-t border-[#eaeaea]">
						<a href="/products" class="nav-link block px-2 py-1.5 transition-colors duration-200">
							{ middleware.T(c, "nav.products") }
						</a>
						<a href="/learn" class="nav-link block px-2 py-1.5 transition-colors duration-200">
							{ middleware.T(c, "nav.learn") }
						</a>
						<a href="/docs" class="nav-link block px-2 py-1.5 transition-colors duration-200">
							{ middleware.T(c, "nav.docs") }
						</a>
						<a href="/pricing" class="nav-link block px-2 py-1.5 transition-colors duration-200">
							{ middleware.T(c, "nav.pricing") }
						</a>
						<div class="border-t border-gray-200 my-1"></div>
						<a href="/contact" class="nav-link block px-2 py-1.5 transition-colors duration-200">
							{ middleware.T(c, "nav.contact") }
						</a>
						<div class="flex items-center justify-between px-2 py-1.5">
							<span class="text-sm text-gray-600">Language:</span>
							<div class="flex space-x-1">
								<a
									href="/lang/en"
									class="text-sm px-2 py-1 rounded hover:bg-gray-100"
								>ðŸ‡¬ðŸ‡§ EN</a>
								<a
									href="/lang/nl"
									class="text-sm px-2 py-1 rounded hover:bg-gray-100"
								>ðŸ‡³ðŸ‡± NL</a>
							</div>
						</div>
						<a href="/account" class="nav-link block px-2 py-1.5 transition-colors duration-200">
							{ middleware.T(c, "nav.account") }
						</a>
					</div>
				</div>
			</header>
			<main class="flex-1 p-3">
				{ children... }
			</main>
			<footer class="bg-gray-100 w-full border-t">
				<div class="rounded-lg p-2 text-xs italic text-gray-700 text-center">
					&copy; AskFrank
				</div>
			</footer>
			<script>
        function toggleMobileMenu() {
            const mobileMenu = document.getElementById('mobile-menu');
            mobileMenu.classList.toggle('hidden');
        }

        function toggleLanguageDropdown() {
            const dropdown = document.getElementById('language-dropdown');
            const isVisible = dropdown.classList.contains('opacity-100');

            if (isVisible) {
                dropdown.classList.remove('opacity-100', 'pointer-events-auto');
                dropdown.classList.add('opacity-0', 'pointer-events-none');
            } else {
                dropdown.classList.remove('opacity-0', 'pointer-events-none');
                dropdown.classList.add('opacity-100', 'pointer-events-auto');
            }
        }

        // Close mobile menu when clicking outside
        document.addEventListener('click', function (event) {
            const mobileMenu = document.getElementById('mobile-menu');
            const menuButton = event.target.closest('button');

            if (!mobileMenu.contains(event.target) && !menuButton) {
                mobileMenu.classList.add('hidden');
            }
        });

        // Close language dropdown when clicking outside
        document.addEventListener('click', function (event) {
            const dropdown = document.getElementById('language-dropdown');
            const dropdownButton = event.target.closest('button[onclick="toggleLanguageDropdown()"]');

            if (!dropdown.contains(event.target) && !dropdownButton) {
                dropdown.classList.remove('opacity-100', 'pointer-events-auto');
                dropdown.classList.add('opacity-0', 'pointer-events-none');
            }
        });
    </script>
		</body>
	</html>
}
