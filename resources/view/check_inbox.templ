package view

import "askfrank/resources/view/component"
import "askfrank/internal/middleware"

import "github.com/gofiber/fiber/v2"

templ CheckInboxPage(c *fiber.Ctx, email string) {
	@component.Layout("Check Your Inbox - AskFrank", c) {
		<div class="min-h-screen bg-gradient-to-br from-white to-[#EAF2EF] flex items-center justify-center py-8 px-3 sm:px-4 lg:px-6">
			<div class="max-w-md w-full space-y-6">
				<div class="text-center">
					<div class="mx-auto w-16 h-16 bg-[#02C39A] rounded-full flex items-center justify-center mb-4">
						<i class="fas fa-envelope text-2xl text-white"></i>
					</div>
					<h2 class="mt-4 text-2xl font-bold text-[#05668D] heading">
						{ middleware.T(c, "auth.checkinbox.title") }
					</h2>
					<p class="mt-1 text-sm text-[#464646]">
						{ middleware.T(c, "auth.checkinbox.subtitle") }
						if email != "" {
							<span class="font-medium text-[#02C39A]">{ email }</span>
						}
					</p>
				</div>
				<div class="bg-white rounded-lg shadow-lg p-6">
					<div class="mb-4 p-3 bg-[#EAF2EF] rounded-lg border-l-4 border-[#02C39A]">
						<div class="flex">
							<div class="flex-shrink-0">
								<i class="fas fa-info-circle text-[#02C39A]"></i>
							</div>
							<div class="ml-2">
								<p class="text-sm text-[#464646]">
									{ middleware.T(c, "auth.checkinbox.info") }
								</p>
							</div>
						</div>
					</div>
					<form id="verificationForm" class="space-y-4" action="/auth/sign-up/check-inbox" method="POST">
						if email != "" {
							<input type="hidden" name="email" value={ email }/>
						}
						<!-- Error message display -->
						<div id="error-message" class="hidden p-4 bg-red-50 border border-red-200 rounded-md">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-red-800" id="error-text">
										<!-- Error message will be inserted here -->
									</h3>
								</div>
							</div>
						</div>
						<!-- Success message display -->
						<div id="success-message" class="hidden p-4 bg-green-50 border border-green-200 rounded-md">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-green-800" id="success-text">
										<!-- Success message will be inserted here -->
									</h3>
								</div>
							</div>
						</div>
						<div>
							<label for="activation_code" class="block text-sm font-medium text-[#464646] mb-1">
								{ middleware.T(c, "auth.checkinbox.code_label") }
							</label>
							<input
								id="activation_code"
								name="activation_code"
								type="text"
								required
								maxlength="6"
								class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#02C39A] focus:border-[#02C39A] transition-colors duration-200 text-center text-lg font-mono tracking-widest uppercase"
								placeholder={ middleware.T(c, "auth.checkinbox.code_placeholder") }
								style="letter-spacing: 0.3em;"
							/>
							<p class="mt-1 text-xs text-[#464646]">
								{ middleware.T(c, "auth.checkinbox.code_hint") }
							</p>
						</div>
						<div class="pt-2">
							<button
								type="submit"
								class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#02C39A] hover:bg-[#028090] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#02C39A] transition-colors duration-200"
							>
								{ middleware.T(c, "auth.checkinbox.submit_button") }
							</button>
						</div>
					</form>
					<div class="mt-4 text-center space-y-3">
						<div class="text-sm text-[#464646]">
							{ middleware.T(c, "auth.checkinbox.no_email_prefix") }
						</div>
						<div class="flex flex-col sm:flex-row gap-2 justify-center">
							<button
								onclick="window.location.reload()"
								class="text-[#02C39A] hover:text-[#028090] text-sm font-medium underline"
							>
								{ middleware.T(c, "auth.checkinbox.resend_button") }
							</button>
							<span class="hidden sm:inline text-[#464646]">â€¢</span>
							<a href="/auth/sign-up/create-user" class="text-[#02C39A] hover:text-[#028090] text-sm font-medium underline">
								{ middleware.T(c, "auth.checkinbox.change_email_button") }
							</a>
						</div>
					</div>
				</div>
				<div class="mt-4 text-center">
					<p class="text-xs text-[#464646]">
						{ middleware.T(c, "auth.checkinbox.footer_note") }
					</p>
				</div>
			</div>
		</div>
		<script>
			// Handle form submission with AJAX for better UX
			document.querySelector('#verificationForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				const formData = new FormData(this);
				const errorDiv = document.getElementById('error-message');
				const successDiv = document.getElementById('success-message');
				const errorText = document.getElementById('error-text');
				const successText = document.getElementById('success-text');
				const submitButton = this.querySelector('button[type="submit"]');
				const codeInput = document.getElementById('activation_code');
				
				// Hide previous messages
				errorDiv.classList.add('hidden');
				successDiv.classList.add('hidden');
				
				// Basic validation
				if (!codeInput.value.trim()) {
					errorText.textContent = 'Please enter the activation code';
					errorDiv.classList.remove('hidden');
					codeInput.focus();
					return;
				}
				
				// Disable submit button during request
				submitButton.disabled = true;
				submitButton.textContent = 'Verifying...';
				
				try {
					const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
					const response = await fetch('/auth/sign-up/check-inbox', {
						method: 'POST',
						headers: {
							'X-CSRF-Token': csrfToken
						},
						body: formData
					});
					
					if (response.redirected) {
						// Successful verification, redirect to account page
						successText.textContent = 'Email verified successfully! Redirecting...';
						successDiv.classList.remove('hidden');
						setTimeout(() => {
							window.location.href = response.url;
						}, 1000);
						return;
					}
					
					const responseText = await response.text();
					
					if (!response.ok) {
						// Show error message
						if (response.status === 400) {
							errorText.textContent = responseText || 'Invalid activation code. Please check and try again.';
						} else {
							errorText.textContent = 'Verification failed. Please try again.';
						}
						errorDiv.classList.remove('hidden');
						codeInput.select(); // Select the code input for easy correction
					}
				} catch (error) {
					errorText.textContent = 'Network error. Please try again.';
					errorDiv.classList.remove('hidden');
				} finally {
					// Re-enable submit button
					submitButton.disabled = false;
					submitButton.textContent = {{ middleware.T(c, "auth.checkinbox.submit_button") }};
				}
			});
			
			// Auto-uppercase and limit input for activation code
			document.getElementById('activation_code').addEventListener('input', function(e) {
				e.target.value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '').substring(0, 6);
			});
		</script>
	}
}
